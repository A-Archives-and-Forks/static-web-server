{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Static Web Server A blazing fast and asynchronous web server for static files serving \u26a1 Overview \u00b6 Static Web Server (or SWS abbreviated) is a very small and fast production-ready web server suitable to serve static web files or assets. It is focused on lightness and easy-to-use principles while keeping high performance and safety powered by The Rust Programming Language . Written on top of Hyper and Tokio runtime. It provides concurrent and asynchronous networking abilities as well as the latest HTTP/1 - HTTP/2 implementations. It's cross-platform and available for Linux, macOS, Windows and FreeBSD ( x86 , x86_64 , ARM , ARM64 ) as well as Docker. Tips If you're looking for v1 please go to 1.x branch . If you want to migrate from v1 to v2 please take a look at v2.0.0 release notes. Features \u00b6 Built with Rust which is focused on safety, speed and concurrency . Memory safe and very reduced CPU and RAM overhead. Blazing fast static files-serving and asynchronous powered by latest Hyper , Tokio and a set of awesome crates . Single 4MB (uncompressed) and fully static binary with no dependencies ( Musl libc ). Suitable for running on any Linux distro or Docker container . Optional GZip, Deflate or Brotli compression for text-based web files only. Compression on-demand via Accept-Encoding header. Partial Content Delivery support for byte-serving of large files. Optional Cache-Control headers for assets. Termination signal handling with graceful shutdown ability and grace period. HTTP/2 and TLS support. Security headers for HTTP/2 by default. HEAD responses. Lightweight and configurable logging via tracing crate. Customizable number of worker threads. Optional directory listing. CORS support. Basic HTTP Authentication. Customizable HTTP response headers for specific file requests via glob patterns. Fallback pages for 404 errors, useful for Single-page applications. Run the server as a Windows Service . Configurable using CLI arguments, environment variables or a TOML file. Default and custom error pages. Custom URL rewrites via glob patterns. Custom URL redirects via glob patterns. Support for serving pre-compressed (Gzip/Brotli) files. First-class Docker support. Scratch and latest Alpine Linux Docker images. Ability to accept a socket listener as a file descriptor for use in sandboxing and on-demand applications (E.g systemd ). Cross-platform. Pre-compiled binaries for Linux, macOS, Windows and FreeBSD ( x86 , x86_64 , ARM , ARM64 ).","title":"Overview"},{"location":"#overview","text":"Static Web Server (or SWS abbreviated) is a very small and fast production-ready web server suitable to serve static web files or assets. It is focused on lightness and easy-to-use principles while keeping high performance and safety powered by The Rust Programming Language . Written on top of Hyper and Tokio runtime. It provides concurrent and asynchronous networking abilities as well as the latest HTTP/1 - HTTP/2 implementations. It's cross-platform and available for Linux, macOS, Windows and FreeBSD ( x86 , x86_64 , ARM , ARM64 ) as well as Docker. Tips If you're looking for v1 please go to 1.x branch . If you want to migrate from v1 to v2 please take a look at v2.0.0 release notes.","title":"Overview"},{"location":"#features","text":"Built with Rust which is focused on safety, speed and concurrency . Memory safe and very reduced CPU and RAM overhead. Blazing fast static files-serving and asynchronous powered by latest Hyper , Tokio and a set of awesome crates . Single 4MB (uncompressed) and fully static binary with no dependencies ( Musl libc ). Suitable for running on any Linux distro or Docker container . Optional GZip, Deflate or Brotli compression for text-based web files only. Compression on-demand via Accept-Encoding header. Partial Content Delivery support for byte-serving of large files. Optional Cache-Control headers for assets. Termination signal handling with graceful shutdown ability and grace period. HTTP/2 and TLS support. Security headers for HTTP/2 by default. HEAD responses. Lightweight and configurable logging via tracing crate. Customizable number of worker threads. Optional directory listing. CORS support. Basic HTTP Authentication. Customizable HTTP response headers for specific file requests via glob patterns. Fallback pages for 404 errors, useful for Single-page applications. Run the server as a Windows Service . Configurable using CLI arguments, environment variables or a TOML file. Default and custom error pages. Custom URL rewrites via glob patterns. Custom URL redirects via glob patterns. Support for serving pre-compressed (Gzip/Brotli) files. First-class Docker support. Scratch and latest Alpine Linux Docker images. Ability to accept a socket listener as a file descriptor for use in sandboxing and on-demand applications (E.g systemd ). Cross-platform. Pre-compiled binaries for Linux, macOS, Windows and FreeBSD ( x86 , x86_64 , ARM , ARM64 ).","title":"Features"},{"location":"building-from-source/","text":"Building from Source \u00b6 Follow these instructions to either build SWS project from the source or the HTML documentation. Building project from source \u00b6 If you want to build SWS from the source, all you need is a Rust 2021 Edition installed. So make sure to install Rust 1.59.0 or higher (or nightly) along with the toolchain(s) of your preference. Then clone the repository and use Cargo to build the project from the source. git clone https://github.com/joseluisq/static-web-server.git cd static-web-server cargo build --release Finally, the release binary should be available at target/release/static-web-server or under your toolchain directory chosen. Don't use the project's Makefile Please don't use the project's Makefile since it's only intended for development and some on-demand tasks. Building documentation from source \u00b6 All HTML documentation is located in the docs/ project's directory and is built using Material for MkDocs . It's only necessary to have Docker installed. Building documentation \u00b6 By default the docs will be built in the /tmp/docs directory, to do so follow these steps. git clone https://github.com/joseluisq/static-web-server.git cd static-web-server mkdir /tmp/docs docker run -it --rm \\ -v $PWD /docs:/docs \\ -v /tmp/docs:/tmp/docs squidfunk/mkdocs-material build Output the docs in a different directory If you want to output the docs in a different directory then append the --site-dir=/new/dir/path/ argument to the \"squidfunk/mkdocs-material\" build command and make sure to provide the new directory path. Development server \u00b6 If you want to improve the documentation then run the built-in development server via docs/docker-compose.yml . git clone https://github.com/joseluisq/static-web-server.git cd static-web-server docker-compose -f docs/docker-compose.yml up Now the server will be available at localhost:8000","title":"Building from Source"},{"location":"building-from-source/#building-from-source","text":"Follow these instructions to either build SWS project from the source or the HTML documentation.","title":"Building from Source"},{"location":"building-from-source/#building-project-from-source","text":"If you want to build SWS from the source, all you need is a Rust 2021 Edition installed. So make sure to install Rust 1.59.0 or higher (or nightly) along with the toolchain(s) of your preference. Then clone the repository and use Cargo to build the project from the source. git clone https://github.com/joseluisq/static-web-server.git cd static-web-server cargo build --release Finally, the release binary should be available at target/release/static-web-server or under your toolchain directory chosen. Don't use the project's Makefile Please don't use the project's Makefile since it's only intended for development and some on-demand tasks.","title":"Building project from source"},{"location":"building-from-source/#building-documentation-from-source","text":"All HTML documentation is located in the docs/ project's directory and is built using Material for MkDocs . It's only necessary to have Docker installed.","title":"Building documentation from source"},{"location":"building-from-source/#building-documentation","text":"By default the docs will be built in the /tmp/docs directory, to do so follow these steps. git clone https://github.com/joseluisq/static-web-server.git cd static-web-server mkdir /tmp/docs docker run -it --rm \\ -v $PWD /docs:/docs \\ -v /tmp/docs:/tmp/docs squidfunk/mkdocs-material build Output the docs in a different directory If you want to output the docs in a different directory then append the --site-dir=/new/dir/path/ argument to the \"squidfunk/mkdocs-material\" build command and make sure to provide the new directory path.","title":"Building documentation"},{"location":"building-from-source/#development-server","text":"If you want to improve the documentation then run the built-in development server via docs/docker-compose.yml . git clone https://github.com/joseluisq/static-web-server.git cd static-web-server docker-compose -f docs/docker-compose.yml up Now the server will be available at localhost:8000","title":"Development server"},{"location":"contributions/","text":"Contributions \u00b6 Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in current work by you, as defined in the Apache License (Version 2.0) license, shall be dual licensed as described below, without any additional terms or conditions. Feel free to send some Pull request or file an issue .","title":"Contributions"},{"location":"contributions/#contributions","text":"Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in current work by you, as defined in the Apache License (Version 2.0) license, shall be dual licensed as described below, without any additional terms or conditions. Feel free to send some Pull request or file an issue .","title":"Contributions"},{"location":"download-and-install/","text":"Download and Install \u00b6 Latest v2.12.0 release 2022-09-27 ( changelog ) Linux 64-bit macOS 64-bit Windows 64-bit FreeBSD 64-bit Installation methods \u00b6 Arch Linux \u00b6 Via Yay or your favorite AUR Helper. yay -S static-web-server-bin MacOS \u00b6 Via Homebrew (also Linux) brew tap static-web-server/static-web-server # Just the binary brew install static-web-server-bin # Or build from source brew install static-web-server Windows \u00b6 Via Scoop scoop install static-web-server Binaries \u00b6 Pre-compiled binaries grouped by CPU architectures. x86_64 \u00b6 static-web-server-v2.12.0-x86_64-apple-darwin.tar.gz SHA256SUM: 43d11bd1b86203f59b5109abc42475642f6d466fbfec565300a800824819237f static-web-server-v2.12.0-x86_64-pc-windows-gnu.zip SHA256SUM: 2371ffda6a8aab20d48e1187daf9d63700e5b4ad247bed01e8b31fa696d195c2 static-web-server-v2.12.0-x86_64-pc-windows-msvc.zip SHA256SUM: f21734e8e46f7e6f734a470ca87665d62927ea2ce0aca0438d0280880ab04f5a static-web-server-v2.12.0-x86_64-unknown-freebsd.tar.gz SHA256SUM: f3c1d9b46e14c5fee422fb8533afccd73a6b40183e7f8c6e35579690bd419bdd static-web-server-v2.12.0-x86_64-unknown-linux-gnu.tar.gz SHA256SUM: 74ef7a87a0fafb7dd7c99abdc8c322d87340c8b11db2747edcee0f9e5575c5b4 static-web-server-v2.12.0-x86_64-unknown-linux-musl.tar.gz SHA256SUM: 0e8baf3e74e69556382057770315820076210978da6c9ee8c80bec3a6b57b3f2 ARM64 \u00b6 static-web-server-v2.12.0-aarch64-unknown-linux-gnu.tar.gz SHA256SUM: b3896a935b7d03c785bf0791b3146adf9b0878a5b1743df9bc66815c55f1fcea static-web-server-v2.12.0-aarch64-unknown-linux-musl.tar.gz SHA256SUM: 38f6c7b85698e31902cc608b2a5f701809b7a3966aa83afa268a6ed0c08b685d static-web-server-v2.12.0-aarch64-apple-darwin.tar.gz SHA256SUM: f2164cfa70f1d4f99b75bc65909746748ff4ecb2113904b56639c8eb8471d6fc x86 \u00b6 static-web-server-v2.12.0-i686-pc-windows-msvc.zip SHA256SUM: 07ad362443a14874ead8d81dead3e82686d7f09db18156785553900322b1c3d5 static-web-server-v2.12.0-i686-unknown-freebsd.tar.gz SHA256SUM: 670721645192e24e1641f784b1d60bf011d7ca8cd5e95afdedf3c0c4f285f40a static-web-server-v2.12.0-i686-unknown-linux-gnu.tar.gz SHA256SUM: 3869ad2dc72fff473a3d557ea4c359a0270c6904e35859be2c513743f669a668 static-web-server-v2.12.0-i686-unknown-linux-musl.tar.gz SHA256SUM: 2aa8b3616cf5f572f10287fd1ebe1db73deba3e6eae0967ad119a1961f6ab0e1 ARM \u00b6 static-web-server-v2.12.0-arm-unknown-linux-gnueabihf.tar.gz SHA256SUM: d3542822ae8b8da25cb9121bf83dace086582e497cdfc3a828bd01584dd5d838 static-web-server-v2.12.0-arm-unknown-linux-musleabihf.tar.gz SHA256SUM: d3ca06a2415c17e1aa015218656dca2168a589d0107926424641f12ec3e3fd1a static-web-server-v2.12.0-armv7-unknown-linux-musleabihf.tar.gz SHA256SUM: f6ee5ed8341d5df9f20aa15541786dbc606738fa9d8c0e03fc57b785e6b43d07 All Releases \u00b6 See all available releases .","title":"Download and Install"},{"location":"download-and-install/#download-and-install","text":"Latest v2.12.0 release 2022-09-27 ( changelog ) Linux 64-bit macOS 64-bit Windows 64-bit FreeBSD 64-bit","title":"Download and Install"},{"location":"download-and-install/#installation-methods","text":"","title":"Installation methods"},{"location":"download-and-install/#arch-linux","text":"Via Yay or your favorite AUR Helper. yay -S static-web-server-bin","title":"Arch Linux"},{"location":"download-and-install/#macos","text":"Via Homebrew (also Linux) brew tap static-web-server/static-web-server # Just the binary brew install static-web-server-bin # Or build from source brew install static-web-server","title":"MacOS"},{"location":"download-and-install/#windows","text":"Via Scoop scoop install static-web-server","title":"Windows"},{"location":"download-and-install/#binaries","text":"Pre-compiled binaries grouped by CPU architectures.","title":"Binaries"},{"location":"download-and-install/#x86_64","text":"static-web-server-v2.12.0-x86_64-apple-darwin.tar.gz SHA256SUM: 43d11bd1b86203f59b5109abc42475642f6d466fbfec565300a800824819237f static-web-server-v2.12.0-x86_64-pc-windows-gnu.zip SHA256SUM: 2371ffda6a8aab20d48e1187daf9d63700e5b4ad247bed01e8b31fa696d195c2 static-web-server-v2.12.0-x86_64-pc-windows-msvc.zip SHA256SUM: f21734e8e46f7e6f734a470ca87665d62927ea2ce0aca0438d0280880ab04f5a static-web-server-v2.12.0-x86_64-unknown-freebsd.tar.gz SHA256SUM: f3c1d9b46e14c5fee422fb8533afccd73a6b40183e7f8c6e35579690bd419bdd static-web-server-v2.12.0-x86_64-unknown-linux-gnu.tar.gz SHA256SUM: 74ef7a87a0fafb7dd7c99abdc8c322d87340c8b11db2747edcee0f9e5575c5b4 static-web-server-v2.12.0-x86_64-unknown-linux-musl.tar.gz SHA256SUM: 0e8baf3e74e69556382057770315820076210978da6c9ee8c80bec3a6b57b3f2","title":"x86_64"},{"location":"download-and-install/#arm64","text":"static-web-server-v2.12.0-aarch64-unknown-linux-gnu.tar.gz SHA256SUM: b3896a935b7d03c785bf0791b3146adf9b0878a5b1743df9bc66815c55f1fcea static-web-server-v2.12.0-aarch64-unknown-linux-musl.tar.gz SHA256SUM: 38f6c7b85698e31902cc608b2a5f701809b7a3966aa83afa268a6ed0c08b685d static-web-server-v2.12.0-aarch64-apple-darwin.tar.gz SHA256SUM: f2164cfa70f1d4f99b75bc65909746748ff4ecb2113904b56639c8eb8471d6fc","title":"ARM64"},{"location":"download-and-install/#x86","text":"static-web-server-v2.12.0-i686-pc-windows-msvc.zip SHA256SUM: 07ad362443a14874ead8d81dead3e82686d7f09db18156785553900322b1c3d5 static-web-server-v2.12.0-i686-unknown-freebsd.tar.gz SHA256SUM: 670721645192e24e1641f784b1d60bf011d7ca8cd5e95afdedf3c0c4f285f40a static-web-server-v2.12.0-i686-unknown-linux-gnu.tar.gz SHA256SUM: 3869ad2dc72fff473a3d557ea4c359a0270c6904e35859be2c513743f669a668 static-web-server-v2.12.0-i686-unknown-linux-musl.tar.gz SHA256SUM: 2aa8b3616cf5f572f10287fd1ebe1db73deba3e6eae0967ad119a1961f6ab0e1","title":"x86"},{"location":"download-and-install/#arm","text":"static-web-server-v2.12.0-arm-unknown-linux-gnueabihf.tar.gz SHA256SUM: d3542822ae8b8da25cb9121bf83dace086582e497cdfc3a828bd01584dd5d838 static-web-server-v2.12.0-arm-unknown-linux-musleabihf.tar.gz SHA256SUM: d3ca06a2415c17e1aa015218656dca2168a589d0107926424641f12ec3e3fd1a static-web-server-v2.12.0-armv7-unknown-linux-musleabihf.tar.gz SHA256SUM: f6ee5ed8341d5df9f20aa15541786dbc606738fa9d8c0e03fc57b785e6b43d07","title":"ARM"},{"location":"download-and-install/#all-releases","text":"See all available releases .","title":"All Releases"},{"location":"getting-started/","text":"Getting Started \u00b6 Download and install the binary for your specific platform and then type static-web-server --port 8787 --root ./my-public-dir Or if you use Docker just try docker run --rm -it -p 8787 :80 joseluisq/static-web-server:2 Docker Tip You can specify a Docker volume like -v $HOME/my-public-dir:/public to overwrite the default root directory. See Docker examples . Type static-web-server --help or see the Command-line arguments section. See how to configure the server using a configuration file . Have a look at the features section for more advanced examples.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Download and install the binary for your specific platform and then type static-web-server --port 8787 --root ./my-public-dir Or if you use Docker just try docker run --rm -it -p 8787 :80 joseluisq/static-web-server:2 Docker Tip You can specify a Docker volume like -v $HOME/my-public-dir:/public to overwrite the default root directory. See Docker examples . Type static-web-server --help or see the Command-line arguments section. See how to configure the server using a configuration file . Have a look at the features section for more advanced examples.","title":"Getting Started"},{"location":"license/","text":"License \u00b6 This work is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0) . \u00a9 2019-present Jose Quintana","title":"License"},{"location":"license/#license","text":"This work is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0) . \u00a9 2019-present Jose Quintana","title":"License"},{"location":"migration/","text":"Migrating from v1 to v2 \u00b6 The v2 introduces notable changes including new features, performance improvements and new target support like ARM64 and OSes like FreeBSD. This version v2 was re-written almost from scratch on top of Hyper and Tokio runtime which gives us the Rust asynchronous ability by default and the latest HTTP/1 - HTTP/2 implementation improvements. However, it still tries to keep the same principles of its v1 : lightness and easy-to-use. Therefore migration should not be a big deal. v2 breaking changes \u00b6 This major v2 has few breaking changes. However, migration should not represent a problem. Tip It is always worth recommending that you test a major server version upgrade like this first with your application(s) in a development environment or similar. Please have in mind the following changes in v2 : The server now supports only a root directory path (via --root or its equivalent env) so an assets path option is no longer required. Cache-control headers are arbitrarily applied to assets. See control headers examples for more details. OpenSSL TLS for HTTP/1 is no longer supported, instead for the HTTP/2 & TLS (via --http2 option) the server uses h2 which is on top of Rustls . It means that instead of using a .p12 or .pfx file you can now use only a certificate file along with its private key. See HTTP/2 & TLS examples for more details. The rest of the known options are equivalent to v1 (except the new ones of course).","title":"Migration from v1 to v2"},{"location":"migration/#migrating-from-v1-to-v2","text":"The v2 introduces notable changes including new features, performance improvements and new target support like ARM64 and OSes like FreeBSD. This version v2 was re-written almost from scratch on top of Hyper and Tokio runtime which gives us the Rust asynchronous ability by default and the latest HTTP/1 - HTTP/2 implementation improvements. However, it still tries to keep the same principles of its v1 : lightness and easy-to-use. Therefore migration should not be a big deal.","title":"Migrating from v1 to v2"},{"location":"migration/#v2-breaking-changes","text":"This major v2 has few breaking changes. However, migration should not represent a problem. Tip It is always worth recommending that you test a major server version upgrade like this first with your application(s) in a development environment or similar. Please have in mind the following changes in v2 : The server now supports only a root directory path (via --root or its equivalent env) so an assets path option is no longer required. Cache-control headers are arbitrarily applied to assets. See control headers examples for more details. OpenSSL TLS for HTTP/1 is no longer supported, instead for the HTTP/2 & TLS (via --http2 option) the server uses h2 which is on top of Rustls . It means that instead of using a .p12 or .pfx file you can now use only a certificate file along with its private key. See HTTP/2 & TLS examples for more details. The rest of the known options are equivalent to v1 (except the new ones of course).","title":"v2 breaking changes"},{"location":"platforms-architectures/","text":"Platforms & Architectures \u00b6 Currently, only the following platforms/architectures are supported. Docker tip For Docker images supported list see Docker OS/Arch . Linux \u00b6 x86 \u00b6 i686-unknown-linux-gnu i686-unknown-linux-musl x86_64 \u00b6 x86_64-unknown-linux-gnu x86_64-unknown-linux-musl ARM \u00b6 arm-unknown-linux-gnueabihf (armv6) arm-unknown-linux-musleabihf (armv6) armv7-unknown-linux-musleabihf (armv7) ARM64 \u00b6 aarch64-unknown-linux-musl aarch64-unknown-linux-gnu macOS \u00b6 x86_64 \u00b6 x86_64-apple-darwin ARM64 \u00b6 aarch64-apple-darwin Windows \u00b6 x86 \u00b6 i686-pc-windows-msvc x86_64 \u00b6 x86_64-pc-windows-msvc x86_64-pc-windows-gnu ARM64 \u00b6 aarch64-pc-windows-msvc (temporarily disabled until briansmith/ring#1167 ) FreeBSD \u00b6 x86 \u00b6 i686-unknown-freebsd x86_64 \u00b6 x86_64-unknown-freebsd","title":"Platforms & Architectures"},{"location":"platforms-architectures/#platforms-architectures","text":"Currently, only the following platforms/architectures are supported. Docker tip For Docker images supported list see Docker OS/Arch .","title":"Platforms &amp; Architectures"},{"location":"platforms-architectures/#linux","text":"","title":"Linux"},{"location":"platforms-architectures/#x86","text":"i686-unknown-linux-gnu i686-unknown-linux-musl","title":"x86"},{"location":"platforms-architectures/#x86_64","text":"x86_64-unknown-linux-gnu x86_64-unknown-linux-musl","title":"x86_64"},{"location":"platforms-architectures/#arm","text":"arm-unknown-linux-gnueabihf (armv6) arm-unknown-linux-musleabihf (armv6) armv7-unknown-linux-musleabihf (armv7)","title":"ARM"},{"location":"platforms-architectures/#arm64","text":"aarch64-unknown-linux-musl aarch64-unknown-linux-gnu","title":"ARM64"},{"location":"platforms-architectures/#macos","text":"","title":"macOS"},{"location":"platforms-architectures/#x86_65","text":"x86_64-apple-darwin","title":"x86_64"},{"location":"platforms-architectures/#arm64_1","text":"aarch64-apple-darwin","title":"ARM64"},{"location":"platforms-architectures/#windows","text":"","title":"Windows"},{"location":"platforms-architectures/#x86_1","text":"i686-pc-windows-msvc","title":"x86"},{"location":"platforms-architectures/#x86_66","text":"x86_64-pc-windows-msvc x86_64-pc-windows-gnu","title":"x86_64"},{"location":"platforms-architectures/#arm64_2","text":"aarch64-pc-windows-msvc (temporarily disabled until briansmith/ring#1167 )","title":"ARM64"},{"location":"platforms-architectures/#freebsd","text":"","title":"FreeBSD"},{"location":"platforms-architectures/#x86_2","text":"i686-unknown-freebsd","title":"x86"},{"location":"platforms-architectures/#x86_67","text":"x86_64-unknown-freebsd","title":"x86_64"},{"location":"semantic-versioning/","text":"Semantic Versioning \u00b6 SWS project adheres to Semantic Versioning for every release like v1 and the latest v2 . Breaking changes \u00b6 Only switches between major versions \"could\" contain breaking changes or not depending on the particular case. However, this project tries to keep away from any kind of breaking change possible between major versions. But it still supports and prioritizes \"no breaking changes\" for minor and patch (bug fixes) versions. On the other hand, if a breaking change is found to be \"strictly necessary\" to do. Then a new major version must be promoted as well as users informed accordingly so they can do a seamless transition.","title":"Semantic Versioning"},{"location":"semantic-versioning/#semantic-versioning","text":"SWS project adheres to Semantic Versioning for every release like v1 and the latest v2 .","title":"Semantic Versioning"},{"location":"semantic-versioning/#breaking-changes","text":"Only switches between major versions \"could\" contain breaking changes or not depending on the particular case. However, this project tries to keep away from any kind of breaking change possible between major versions. But it still supports and prioritizes \"no breaking changes\" for minor and patch (bug fixes) versions. On the other hand, if a breaking change is found to be \"strictly necessary\" to do. Then a new major version must be promoted as well as users informed accordingly so they can do a seamless transition.","title":"Breaking changes"},{"location":"configuration/command-line-arguments/","text":"Command-Line Arguments \u00b6 The server can be configured via the following command-line arguments. Remember Command-line arguments are equivalent to their environment variables . Command-line arguments take precedence over their equivalent environment variables. $ static-web-server -h static-web-server 2.12.0 Jose Quintana <https://joseluisq.net> A blazing fast and asynchronous web server for static files-serving. USAGE: static-web-server [OPTIONS] FLAGS: -h, --help Prints help information -V, --version Prints version information OPTIONS: --basic-auth <basic-auth> It provides The \"Basic\" HTTP Authentication scheme using credentials as \"user-id:password\" pairs. Password must be encoded using the \"BCrypt\" password-hashing function [env: SERVER_BASIC_AUTH=] [default: ] -e, --cache-control-headers <cache-control-headers> Enable cache control headers for incoming requests based on a set of file types. The file type list can be found on `src/control_headers.rs` file [env: SERVER_CACHE_CONTROL_HEADERS=] [default: true] -x, --compression <compression> Gzip, Deflate or Brotli compression on demand determined by the Accept-Encoding header and applied to text- based web file types only [env: SERVER_COMPRESSION=] [default: true] --compression-static <compression-static> Look up the pre-compressed file variant (`.gz` or `.br`) on disk of a requested file and serves it directly if available. The compression type is determined by the `Accept-Encoding` header [env: SERVER_COMPRESSION_STATIC=] [default: false] -w, --config-file <config-file> Server TOML configuration file path [env: SERVER_CONFIG_FILE=] -j, --cors-allow-headers <cors-allow-headers> Specify an optional CORS list of allowed headers separated by comas. Default \"origin, content-type\". It requires `--cors-allow-origins` to be used along with [env: SERVER_CORS_ALLOW_HEADERS=] [default: origin, content-type] -c, --cors-allow-origins <cors-allow-origins> Specify an optional CORS list of allowed origin hosts separated by comas. Host ports or protocols aren't being checked. Use an asterisk (*) to allow any host [env: SERVER_CORS_ALLOW_ORIGINS=] [default: ] -z, --directory-listing <directory-listing> Enable directory listing for all requests ending with the slash character (\u2018/\u2019) [env: SERVER_DIRECTORY_LISTING=] [default: false] --directory-listing-order <directory-listing-order> Specify a default code number to order directory listing entries per `Name`, `Last modified` or `Size` attributes (columns). Code numbers supported: 0 (Name asc), 1 (Name desc), 2 (Last modified asc), 3 (Last modified desc), 4 (Size asc), 5 (Size desc). Default 6 (unordered) [env: SERVER_DIRECTORY_LISTING_ORDER=] [default: 6] -f, --fd <fd> Instead of binding to a TCP port, accept incoming connections to an already-bound TCP socket listener on the specified file descriptor number (usually zero). Requires that the parent process (e.g. inetd, launchd, or systemd) binds an address and port on behalf of static-web-server, before arranging for the resulting file descriptor to be inherited by static-web-server. Cannot be used in conjunction with the port and host arguments. The included systemd unit file utilises this feature to increase security by allowing the static- web-server to be sandboxed more completely [env: SERVER_LISTEN_FD=] -q, --grace-period <grace-period> Defines a grace period in seconds after a `SIGTERM` signal is caught which will delay the server before to shut it down gracefully. The maximum value is 255 seconds [env: SERVER_GRACE_PERIOD=] [default: 0] -a, --host <host> Host address (E.g 127.0.0.1 or ::1) [env: SERVER_HOST=] [default: ::] -t, --http2 <http2> Enable HTTP/2 with TLS support [env: SERVER_HTTP2_TLS=] [default: false] --http2-tls-cert <http2-tls-cert> Specify the file path to read the certificate [env: SERVER_HTTP2_TLS_CERT=] --http2-tls-key <http2-tls-key> Specify the file path to read the private key [env: SERVER_HTTP2_TLS_KEY=] -g, --log-level <log-level> Specify a logging level in lower case. Values: error, warn, info, debug or trace [env: SERVER_LOG_LEVEL=] [default: error] --log-remote-address <log-remote-address> Log incoming requests information along with its remote address if available using the `info` log level [env: SERVER_LOG_REMOTE_ADDRESS=] [default: false] --page-fallback <page-fallback> HTML file path that is used for GET requests when the requested path doesn't exist. The fallback page is served with a 200 status code, useful when using client routers. If the path is not specified or simply doesn't exist then this feature will not be active [env: SERVER_FALLBACK_PAGE=] --page404 <page404> HTML file path for 404 errors. If the path is not specified or simply doesn't exist then the server will use a generic HTML error message [env: SERVER_ERROR_PAGE_404=] [default: ./public/404.html] --page50x <page50x> HTML file path for 50x errors. If the path is not specified or simply doesn't exist then the server will use a generic HTML error message [env: SERVER_ERROR_PAGE_50X=] [default: ./public/50x.html] -p, --port <port> Host port [env: SERVER_PORT=] [default: 80] --redirect-trailing-slash <redirect-trailing-slash> Check for a trailing slash in the requested directory URI and redirect permanently (308) to the same path with a trailing slash suffix if it is missing [env: REDIRECT_TRAILING_SLASH=] [default: true] -d, --root <root> Root directory path of static files [env: SERVER_ROOT=] [default: ./public] --security-headers <security-headers> Enable security headers by default when HTTP/2 feature is activated. Headers included: \"Strict-Transport- Security: max-age=63072000; includeSubDomains; preload\" (2 years max-age), \"X-Frame- Options: DENY\", \"X-XSS-Protection: 1; mode=block\" and \"Content-Security-Policy: frame-ancestors 'self'\" [env: SERVER_SECURITY_HEADERS=] [default: false] -n, --threads-multiplier <threads-multiplier> Number of worker threads multiplier that'll be multiplied by the number of system CPUs using the formula: `worker threads = number of CPUs * n` where `n` is the value that changes here. When multiplier value is 0 or 1 then one thread per core is used. Number of worker threads result should be a number between 1 and 32,768 though it is advised to keep this value on the smaller side [env: SERVER_THREADS_MULTIPLIER=] [default: 1] Windows \u00b6 Following options and commands are Windows platform specific. -s, --windows-service <windows-service> Run the web server as a Windows Service [env: SERVER_WINDOWS_SERVICE=] [default: false] SUBCOMMANDS: help Prints this message or the help of the given subcommand(s) install Install a Windows Service for the web server uninstall Uninstall the current Windows Service","title":"Command Line Arguments"},{"location":"configuration/command-line-arguments/#command-line-arguments","text":"The server can be configured via the following command-line arguments. Remember Command-line arguments are equivalent to their environment variables . Command-line arguments take precedence over their equivalent environment variables. $ static-web-server -h static-web-server 2.12.0 Jose Quintana <https://joseluisq.net> A blazing fast and asynchronous web server for static files-serving. USAGE: static-web-server [OPTIONS] FLAGS: -h, --help Prints help information -V, --version Prints version information OPTIONS: --basic-auth <basic-auth> It provides The \"Basic\" HTTP Authentication scheme using credentials as \"user-id:password\" pairs. Password must be encoded using the \"BCrypt\" password-hashing function [env: SERVER_BASIC_AUTH=] [default: ] -e, --cache-control-headers <cache-control-headers> Enable cache control headers for incoming requests based on a set of file types. The file type list can be found on `src/control_headers.rs` file [env: SERVER_CACHE_CONTROL_HEADERS=] [default: true] -x, --compression <compression> Gzip, Deflate or Brotli compression on demand determined by the Accept-Encoding header and applied to text- based web file types only [env: SERVER_COMPRESSION=] [default: true] --compression-static <compression-static> Look up the pre-compressed file variant (`.gz` or `.br`) on disk of a requested file and serves it directly if available. The compression type is determined by the `Accept-Encoding` header [env: SERVER_COMPRESSION_STATIC=] [default: false] -w, --config-file <config-file> Server TOML configuration file path [env: SERVER_CONFIG_FILE=] -j, --cors-allow-headers <cors-allow-headers> Specify an optional CORS list of allowed headers separated by comas. Default \"origin, content-type\". It requires `--cors-allow-origins` to be used along with [env: SERVER_CORS_ALLOW_HEADERS=] [default: origin, content-type] -c, --cors-allow-origins <cors-allow-origins> Specify an optional CORS list of allowed origin hosts separated by comas. Host ports or protocols aren't being checked. Use an asterisk (*) to allow any host [env: SERVER_CORS_ALLOW_ORIGINS=] [default: ] -z, --directory-listing <directory-listing> Enable directory listing for all requests ending with the slash character (\u2018/\u2019) [env: SERVER_DIRECTORY_LISTING=] [default: false] --directory-listing-order <directory-listing-order> Specify a default code number to order directory listing entries per `Name`, `Last modified` or `Size` attributes (columns). Code numbers supported: 0 (Name asc), 1 (Name desc), 2 (Last modified asc), 3 (Last modified desc), 4 (Size asc), 5 (Size desc). Default 6 (unordered) [env: SERVER_DIRECTORY_LISTING_ORDER=] [default: 6] -f, --fd <fd> Instead of binding to a TCP port, accept incoming connections to an already-bound TCP socket listener on the specified file descriptor number (usually zero). Requires that the parent process (e.g. inetd, launchd, or systemd) binds an address and port on behalf of static-web-server, before arranging for the resulting file descriptor to be inherited by static-web-server. Cannot be used in conjunction with the port and host arguments. The included systemd unit file utilises this feature to increase security by allowing the static- web-server to be sandboxed more completely [env: SERVER_LISTEN_FD=] -q, --grace-period <grace-period> Defines a grace period in seconds after a `SIGTERM` signal is caught which will delay the server before to shut it down gracefully. The maximum value is 255 seconds [env: SERVER_GRACE_PERIOD=] [default: 0] -a, --host <host> Host address (E.g 127.0.0.1 or ::1) [env: SERVER_HOST=] [default: ::] -t, --http2 <http2> Enable HTTP/2 with TLS support [env: SERVER_HTTP2_TLS=] [default: false] --http2-tls-cert <http2-tls-cert> Specify the file path to read the certificate [env: SERVER_HTTP2_TLS_CERT=] --http2-tls-key <http2-tls-key> Specify the file path to read the private key [env: SERVER_HTTP2_TLS_KEY=] -g, --log-level <log-level> Specify a logging level in lower case. Values: error, warn, info, debug or trace [env: SERVER_LOG_LEVEL=] [default: error] --log-remote-address <log-remote-address> Log incoming requests information along with its remote address if available using the `info` log level [env: SERVER_LOG_REMOTE_ADDRESS=] [default: false] --page-fallback <page-fallback> HTML file path that is used for GET requests when the requested path doesn't exist. The fallback page is served with a 200 status code, useful when using client routers. If the path is not specified or simply doesn't exist then this feature will not be active [env: SERVER_FALLBACK_PAGE=] --page404 <page404> HTML file path for 404 errors. If the path is not specified or simply doesn't exist then the server will use a generic HTML error message [env: SERVER_ERROR_PAGE_404=] [default: ./public/404.html] --page50x <page50x> HTML file path for 50x errors. If the path is not specified or simply doesn't exist then the server will use a generic HTML error message [env: SERVER_ERROR_PAGE_50X=] [default: ./public/50x.html] -p, --port <port> Host port [env: SERVER_PORT=] [default: 80] --redirect-trailing-slash <redirect-trailing-slash> Check for a trailing slash in the requested directory URI and redirect permanently (308) to the same path with a trailing slash suffix if it is missing [env: REDIRECT_TRAILING_SLASH=] [default: true] -d, --root <root> Root directory path of static files [env: SERVER_ROOT=] [default: ./public] --security-headers <security-headers> Enable security headers by default when HTTP/2 feature is activated. Headers included: \"Strict-Transport- Security: max-age=63072000; includeSubDomains; preload\" (2 years max-age), \"X-Frame- Options: DENY\", \"X-XSS-Protection: 1; mode=block\" and \"Content-Security-Policy: frame-ancestors 'self'\" [env: SERVER_SECURITY_HEADERS=] [default: false] -n, --threads-multiplier <threads-multiplier> Number of worker threads multiplier that'll be multiplied by the number of system CPUs using the formula: `worker threads = number of CPUs * n` where `n` is the value that changes here. When multiplier value is 0 or 1 then one thread per core is used. Number of worker threads result should be a number between 1 and 32,768 though it is advised to keep this value on the smaller side [env: SERVER_THREADS_MULTIPLIER=] [default: 1]","title":"Command-Line Arguments"},{"location":"configuration/command-line-arguments/#windows","text":"Following options and commands are Windows platform specific. -s, --windows-service <windows-service> Run the web server as a Windows Service [env: SERVER_WINDOWS_SERVICE=] [default: false] SUBCOMMANDS: help Prints this message or the help of the given subcommand(s) install Install a Windows Service for the web server uninstall Uninstall the current Windows Service","title":"Windows"},{"location":"configuration/config-file/","text":"TOML Configuration File \u00b6 SWS can be configured using a TOML file to adjust the general server features as well as other advanced ones. It's disabled by default and can be enabled by passing a string file path via the -w, --config-file option or its equivalent SERVER_CONFIG_FILE env. TOML File (Manifest) \u00b6 Below is just an example showing all features with their default values. [general] #### Address & Root dir host = \"::\" port = 80 root = \"./public\" #### Logging log-level = \"error\" #### Cache Control headers cache-control-headers = true #### Auto Compression compression = true #### Error pages page404 = \"./public/404.html\" page50x = \"./public/50x.html\" #### HTTP/2 + TLS http2 = false # http2-tls-cert = \"some.cert\" # http2-tls-key = \"some.key\" #### Security headers security-headers = true #### CORS cors-allow-origins = \"\" cors-allow-headers = \"\" #### Directory listing directory-listing = false directory-listing-order = 6 #### Basich Authentication basic-auth = \"\" #### File descriptor binding # fd = \"\" #### Worker threads threads-multiplier = 1 #### Grace period after a graceful shutdown grace-period = 0 #### Page fallback for 404s # page-fallback = \"some_page.html\" #### Log request Remote Address if available log-remote-address = false #### Redirect to trailing slash in the requested directory uri redirect-trailing-slash = true #### Check for existing pre-compressed files compression-static = false ### Windows Only #### Windows Service support. #### NOTE: this doesn't create a Windows Service per se, #### instead, it just tells SWS to run in a Windows Service context, #### so it's necessary to install the SWS Windows Service first #### using the `static-web-server.exe -w config.toml install` command. #### More details on https://sws.joseluisq.net/features/windows-service/ # windows-service = false [advanced] #### .... General options \u00b6 The TOML [general] section allows adjusting the current options available via the CLI/ENV ones. So they are equivalent to each other except for the -w, --config-file option which is omitted and can not be used for obvious reasons. Config file-based features are optional All server feature options via the configuration file are optional and can be omitted as needed. Advanced options \u00b6 The TOML [advanced] section is intended for more complex features. For example Custom HTTP Headers . Precedence \u00b6 Whatever config file-based feature option will take precedence over its CLI or ENV equivalent. Usage \u00b6 The following command runs the server using a specific config.toml file. static-web-server -w config.toml","title":"TOML Configuration File"},{"location":"configuration/config-file/#toml-configuration-file","text":"SWS can be configured using a TOML file to adjust the general server features as well as other advanced ones. It's disabled by default and can be enabled by passing a string file path via the -w, --config-file option or its equivalent SERVER_CONFIG_FILE env.","title":"TOML Configuration File"},{"location":"configuration/config-file/#toml-file-manifest","text":"Below is just an example showing all features with their default values. [general] #### Address & Root dir host = \"::\" port = 80 root = \"./public\" #### Logging log-level = \"error\" #### Cache Control headers cache-control-headers = true #### Auto Compression compression = true #### Error pages page404 = \"./public/404.html\" page50x = \"./public/50x.html\" #### HTTP/2 + TLS http2 = false # http2-tls-cert = \"some.cert\" # http2-tls-key = \"some.key\" #### Security headers security-headers = true #### CORS cors-allow-origins = \"\" cors-allow-headers = \"\" #### Directory listing directory-listing = false directory-listing-order = 6 #### Basich Authentication basic-auth = \"\" #### File descriptor binding # fd = \"\" #### Worker threads threads-multiplier = 1 #### Grace period after a graceful shutdown grace-period = 0 #### Page fallback for 404s # page-fallback = \"some_page.html\" #### Log request Remote Address if available log-remote-address = false #### Redirect to trailing slash in the requested directory uri redirect-trailing-slash = true #### Check for existing pre-compressed files compression-static = false ### Windows Only #### Windows Service support. #### NOTE: this doesn't create a Windows Service per se, #### instead, it just tells SWS to run in a Windows Service context, #### so it's necessary to install the SWS Windows Service first #### using the `static-web-server.exe -w config.toml install` command. #### More details on https://sws.joseluisq.net/features/windows-service/ # windows-service = false [advanced] #### ....","title":"TOML File (Manifest)"},{"location":"configuration/config-file/#general-options","text":"The TOML [general] section allows adjusting the current options available via the CLI/ENV ones. So they are equivalent to each other except for the -w, --config-file option which is omitted and can not be used for obvious reasons. Config file-based features are optional All server feature options via the configuration file are optional and can be omitted as needed.","title":"General options"},{"location":"configuration/config-file/#advanced-options","text":"The TOML [advanced] section is intended for more complex features. For example Custom HTTP Headers .","title":"Advanced options"},{"location":"configuration/config-file/#precedence","text":"Whatever config file-based feature option will take precedence over its CLI or ENV equivalent.","title":"Precedence"},{"location":"configuration/config-file/#usage","text":"The following command runs the server using a specific config.toml file. static-web-server -w config.toml","title":"Usage"},{"location":"configuration/environment-variables/","text":"Environment Variables \u00b6 The server can be configured via the following environment variables. Remember Environment variables are equivalent to their command-line arguments. Command-line arguments take precedence over their equivalent environment variables. SERVER_HOST \u00b6 The address of the host (E.g 127.0.0.1). Default [::] . SERVER_PORT \u00b6 The port of the host. Default 80 . SERVER_LISTEN_FD \u00b6 Optional file descriptor number (e.g. 0 ) to inherit an already-opened TCP listener on (instead of using SERVER_HOST and/or SERVER_PORT ). Default empty (disabled). SERVER_ROOT \u00b6 Relative or absolute root directory path of static files. Default ./public . SERVER_CONFIG_FILE \u00b6 The Server configuration file path is in TOML format. See The TOML Configuration File . SERVER_GRACE_PERIOD \u00b6 Defines a grace period in seconds after a SIGTERM signal is caught which will delay the server before shutting it down gracefully. The maximum value is 255 seconds. The default value is 0 (no delay). SERVER_LOG_LEVEL \u00b6 Specify a logging level in lower case. Possible values are error , warn , info , debug or trace . Default error . SERVER_LOG_REMOTE_ADDRESS \u00b6 Log incoming requests information along with its Remote Address (IP) if available using the info log level. SERVER_ERROR_PAGE_404 \u00b6 HTML file path for 404 errors. If the path is not specified or simply doesn't exist then the server will use a generic HTML error message. Default ./public/404.html . SERVER_ERROR_PAGE_50X \u00b6 HTML file path for 50x errors. If the path is not specified or simply doesn't exist then the server will use a generic HTML error message. Default ./public/50x.html SERVER_FALLBACK_PAGE \u00b6 HTML file path that is used for GET requests when the requested path doesn't exist. The fallback page is served with a 200 status code, useful when using client routers (E.g React Router ). If the path is not specified or simply doesn't exist then this feature will not be active. SERVER_THREADS_MULTIPLIER \u00b6 The number of worker threads multiplier that'll be multiplied by the number of system CPUs using the formula: worker threads = number of CPUs * n where n is the value that changes here. When the multiplier value is 0 or 1 then the number of CPUs is used. The number of worker threads result should be a number between 1 and 32,768 though it is advised to keep this value on the smaller side. Default one thread per core. SERVER_HTTP2_TLS \u00b6 Enable HTTP/2 with TLS support. Make sure also to adjust the current server port. Default false (disabled). SERVER_HTTP2_TLS_CERT \u00b6 Specify the file path to read the certificate. Default empty (disabled). SERVER_HTTP2_TLS_KEY \u00b6 Specify the file path to read the private key. Default empty (disabled). SERVER_CORS_ALLOW_ORIGINS \u00b6 Specify an optional CORS list of allowed origin hosts separated by commas. Host ports or protocols aren't being checked. Use an asterisk (*) to allow any host. Default empty (disabled). SERVER_CORS_ALLOW_HEADERS \u00b6 Specify an optional CORS list of allowed HTTP headers separated by commas. It requires SERVER_CORS_ALLOW_ORIGINS to be used along with. Default origin, content-type . SERVER_COMPRESSION \u00b6 Gzip , Deflate or Brotli compression on demand determined by the Accept-Encoding header and applied to text-based web file types only. See ad-hoc mime-type list . Default true (enabled). SERVER_COMPRESSION_STATIC \u00b6 Look up the pre-compressed file variant ( .gz or .br ) on disk of a requested file and serves it directly if available. Default false (disabled). The compression type is determined by the Accept-Encoding header. SERVER_DIRECTORY_LISTING \u00b6 Enable directory listing for all requests ending with the slash character (\u2018/\u2019). Default false (disabled). SERVER_DIRECTORY_LISTING_ORDER \u00b6 Specify a default code number to order directory listing entries per Name , Last modified or Size attributes (columns). Code numbers supported: 0 (Name asc), 1 (Name desc), 2 (Last modified asc), 3 (Last modified desc), 4 (Size asc), 5 (Size desc). Default 6 (unordered). SERVER_SECURITY_HEADERS \u00b6 Enable security headers by default when HTTP/2 feature is activated. Headers included: Strict-Transport-Security: max-age=63072000; includeSubDomains; preload (2 years max-age), X-Frame-Options: DENY , X-XSS-Protection: 1; mode=block and Content-Security-Policy: frame-ancestors 'self' . Default false (disabled). SERVER_CACHE_CONTROL_HEADERS \u00b6 Enable cache control headers for incoming requests based on a set of file types. The file type list can be found on src/control_headers.rs file. Default true (enabled). SERVER_BASIC_AUTH \u00b6 It provides The \"Basic\" HTTP Authentication Scheme using credentials as user-id:password pairs, encoded using Base64 . Password must be encoded using the BCrypt password-hashing function. Default empty (disabled). REDIRECT_TRAILING_SLASH \u00b6 Check for a trailing slash in the requested directory URI and redirect permanent (308) to the same path with a trailing slash suffix if it is missing. Default true (enabled). Windows \u00b6 The following options and commands are Windows platform-specific. SERVER_WINDOWS_SERVICE \u00b6 Run the web server in a Windows Service context. See more details .","title":"Environment Variables"},{"location":"configuration/environment-variables/#environment-variables","text":"The server can be configured via the following environment variables. Remember Environment variables are equivalent to their command-line arguments. Command-line arguments take precedence over their equivalent environment variables.","title":"Environment Variables"},{"location":"configuration/environment-variables/#server_host","text":"The address of the host (E.g 127.0.0.1). Default [::] .","title":"SERVER_HOST"},{"location":"configuration/environment-variables/#server_port","text":"The port of the host. Default 80 .","title":"SERVER_PORT"},{"location":"configuration/environment-variables/#server_listen_fd","text":"Optional file descriptor number (e.g. 0 ) to inherit an already-opened TCP listener on (instead of using SERVER_HOST and/or SERVER_PORT ). Default empty (disabled).","title":"SERVER_LISTEN_FD"},{"location":"configuration/environment-variables/#server_root","text":"Relative or absolute root directory path of static files. Default ./public .","title":"SERVER_ROOT"},{"location":"configuration/environment-variables/#server_config_file","text":"The Server configuration file path is in TOML format. See The TOML Configuration File .","title":"SERVER_CONFIG_FILE"},{"location":"configuration/environment-variables/#server_grace_period","text":"Defines a grace period in seconds after a SIGTERM signal is caught which will delay the server before shutting it down gracefully. The maximum value is 255 seconds. The default value is 0 (no delay).","title":"SERVER_GRACE_PERIOD"},{"location":"configuration/environment-variables/#server_log_level","text":"Specify a logging level in lower case. Possible values are error , warn , info , debug or trace . Default error .","title":"SERVER_LOG_LEVEL"},{"location":"configuration/environment-variables/#server_log_remote_address","text":"Log incoming requests information along with its Remote Address (IP) if available using the info log level.","title":"SERVER_LOG_REMOTE_ADDRESS"},{"location":"configuration/environment-variables/#server_error_page_404","text":"HTML file path for 404 errors. If the path is not specified or simply doesn't exist then the server will use a generic HTML error message. Default ./public/404.html .","title":"SERVER_ERROR_PAGE_404"},{"location":"configuration/environment-variables/#server_error_page_50x","text":"HTML file path for 50x errors. If the path is not specified or simply doesn't exist then the server will use a generic HTML error message. Default ./public/50x.html","title":"SERVER_ERROR_PAGE_50X"},{"location":"configuration/environment-variables/#server_fallback_page","text":"HTML file path that is used for GET requests when the requested path doesn't exist. The fallback page is served with a 200 status code, useful when using client routers (E.g React Router ). If the path is not specified or simply doesn't exist then this feature will not be active.","title":"SERVER_FALLBACK_PAGE"},{"location":"configuration/environment-variables/#server_threads_multiplier","text":"The number of worker threads multiplier that'll be multiplied by the number of system CPUs using the formula: worker threads = number of CPUs * n where n is the value that changes here. When the multiplier value is 0 or 1 then the number of CPUs is used. The number of worker threads result should be a number between 1 and 32,768 though it is advised to keep this value on the smaller side. Default one thread per core.","title":"SERVER_THREADS_MULTIPLIER"},{"location":"configuration/environment-variables/#server_http2_tls","text":"Enable HTTP/2 with TLS support. Make sure also to adjust the current server port. Default false (disabled).","title":"SERVER_HTTP2_TLS"},{"location":"configuration/environment-variables/#server_http2_tls_cert","text":"Specify the file path to read the certificate. Default empty (disabled).","title":"SERVER_HTTP2_TLS_CERT"},{"location":"configuration/environment-variables/#server_http2_tls_key","text":"Specify the file path to read the private key. Default empty (disabled).","title":"SERVER_HTTP2_TLS_KEY"},{"location":"configuration/environment-variables/#server_cors_allow_origins","text":"Specify an optional CORS list of allowed origin hosts separated by commas. Host ports or protocols aren't being checked. Use an asterisk (*) to allow any host. Default empty (disabled).","title":"SERVER_CORS_ALLOW_ORIGINS"},{"location":"configuration/environment-variables/#server_cors_allow_headers","text":"Specify an optional CORS list of allowed HTTP headers separated by commas. It requires SERVER_CORS_ALLOW_ORIGINS to be used along with. Default origin, content-type .","title":"SERVER_CORS_ALLOW_HEADERS"},{"location":"configuration/environment-variables/#server_compression","text":"Gzip , Deflate or Brotli compression on demand determined by the Accept-Encoding header and applied to text-based web file types only. See ad-hoc mime-type list . Default true (enabled).","title":"SERVER_COMPRESSION"},{"location":"configuration/environment-variables/#server_compression_static","text":"Look up the pre-compressed file variant ( .gz or .br ) on disk of a requested file and serves it directly if available. Default false (disabled). The compression type is determined by the Accept-Encoding header.","title":"SERVER_COMPRESSION_STATIC"},{"location":"configuration/environment-variables/#server_directory_listing","text":"Enable directory listing for all requests ending with the slash character (\u2018/\u2019). Default false (disabled).","title":"SERVER_DIRECTORY_LISTING"},{"location":"configuration/environment-variables/#server_directory_listing_order","text":"Specify a default code number to order directory listing entries per Name , Last modified or Size attributes (columns). Code numbers supported: 0 (Name asc), 1 (Name desc), 2 (Last modified asc), 3 (Last modified desc), 4 (Size asc), 5 (Size desc). Default 6 (unordered).","title":"SERVER_DIRECTORY_LISTING_ORDER"},{"location":"configuration/environment-variables/#server_security_headers","text":"Enable security headers by default when HTTP/2 feature is activated. Headers included: Strict-Transport-Security: max-age=63072000; includeSubDomains; preload (2 years max-age), X-Frame-Options: DENY , X-XSS-Protection: 1; mode=block and Content-Security-Policy: frame-ancestors 'self' . Default false (disabled).","title":"SERVER_SECURITY_HEADERS"},{"location":"configuration/environment-variables/#server_cache_control_headers","text":"Enable cache control headers for incoming requests based on a set of file types. The file type list can be found on src/control_headers.rs file. Default true (enabled).","title":"SERVER_CACHE_CONTROL_HEADERS"},{"location":"configuration/environment-variables/#server_basic_auth","text":"It provides The \"Basic\" HTTP Authentication Scheme using credentials as user-id:password pairs, encoded using Base64 . Password must be encoded using the BCrypt password-hashing function. Default empty (disabled).","title":"SERVER_BASIC_AUTH"},{"location":"configuration/environment-variables/#redirect_trailing_slash","text":"Check for a trailing slash in the requested directory URI and redirect permanent (308) to the same path with a trailing slash suffix if it is missing. Default true (enabled).","title":"REDIRECT_TRAILING_SLASH"},{"location":"configuration/environment-variables/#windows","text":"The following options and commands are Windows platform-specific.","title":"Windows"},{"location":"configuration/environment-variables/#server_windows_service","text":"Run the web server in a Windows Service context. See more details .","title":"SERVER_WINDOWS_SERVICE"},{"location":"features/basic-authentication/","text":"Basic HTTP Authentication \u00b6 SWS provides 'Basic' HTTP Authentication Scheme using an user:password pair. This feature is disabled by default and can be controlled by the string --basic-auth option or the equivalent SERVER_BASIC_AUTH env. The format to use is the following: username:encrypted_password Both are separated by a : (punctuation mark) character. Password Encryption Only the password must be encoded using the BCrypt password-hashing function. As an example, we will use the Apache htpasswd tool to generate the username:encrypted_password pair. htpasswd -nBC10 \"username\" # New password: # Re-type new password: # username:$2y$10$8phm28BB4YpKPDjOpdTT8eUcfVDw0xc85VZPxg2zae1GR8EQqus3i Password Security Advice The password verification happens at runtime but its verification speed depends on the computing time cost of bcrypt algorithm used. For example, the htpasswd tool supports a -C argument to adjust the bcrypt 's computing time. Using a higher value is more secure but slower. The default value is 5 and the possible values are ranging from 4 to 17 . Docker Compose Advice If you are using SERVER_BASIC_AUTH env via a docker-compose.yml file don't forget to replace the single $ (dollar sign) with a $$ (double-dollar sign) if you want those individual $ dollar signs in your configuration to be treated by Docker as literals. More details at Docker Compose file: variable substitution Finally, assign the credentials and run the server. static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ --basic-auth 'username:$2y$10$8phm28BB4YpKPDjOpdTT8eUcfVDw0xc85VZPxg2zae1GR8EQqus3i'","title":"Basic Authentication"},{"location":"features/basic-authentication/#basic-http-authentication","text":"SWS provides 'Basic' HTTP Authentication Scheme using an user:password pair. This feature is disabled by default and can be controlled by the string --basic-auth option or the equivalent SERVER_BASIC_AUTH env. The format to use is the following: username:encrypted_password Both are separated by a : (punctuation mark) character. Password Encryption Only the password must be encoded using the BCrypt password-hashing function. As an example, we will use the Apache htpasswd tool to generate the username:encrypted_password pair. htpasswd -nBC10 \"username\" # New password: # Re-type new password: # username:$2y$10$8phm28BB4YpKPDjOpdTT8eUcfVDw0xc85VZPxg2zae1GR8EQqus3i Password Security Advice The password verification happens at runtime but its verification speed depends on the computing time cost of bcrypt algorithm used. For example, the htpasswd tool supports a -C argument to adjust the bcrypt 's computing time. Using a higher value is more secure but slower. The default value is 5 and the possible values are ranging from 4 to 17 . Docker Compose Advice If you are using SERVER_BASIC_AUTH env via a docker-compose.yml file don't forget to replace the single $ (dollar sign) with a $$ (double-dollar sign) if you want those individual $ dollar signs in your configuration to be treated by Docker as literals. More details at Docker Compose file: variable substitution Finally, assign the credentials and run the server. static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ --basic-auth 'username:$2y$10$8phm28BB4YpKPDjOpdTT8eUcfVDw0xc85VZPxg2zae1GR8EQqus3i'","title":"Basic HTTP Authentication"},{"location":"features/cache-control-headers/","text":"Cache-Control Headers \u00b6 SWS provides support for arbitrary Cache-Control HTTP header specifying public and max-age response directives. This feature is enabled by default and can be controlled by the boolean -e, --cache-control-headers option or the equivalent SERVER_CACHE_CONTROL_HEADERS env. Customize HTTP headers If you want to customize HTTP headers on demand then have a look at the Custom HTTP Headers section. Cache-Control Max-Age \u00b6 Control headers are applied only to the following file types with the corresponding max-age values. One day \u00b6 A max-age of one day duration is used by default. Note One-day max-age for example includes html and other file types. One hour \u00b6 A max-age of one hour is applied only to the following file types. atom, json, rss, xml One year \u00b6 A max-age of one year is applied only to the following file types. avif, bmp, bz2, css, doc, gif, gz, htc, ico, jpeg, jpg, js, jxl, map, mjs, mp3, mp4, ogg, ogv, pdf, png, rar, rtf, tar, tgz, wav, weba, webm, webp, woff, woff2, zip Below is an example of how to enable the feature. static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ --cache-control-headers true","title":"Cache Control Headers"},{"location":"features/cache-control-headers/#cache-control-headers","text":"SWS provides support for arbitrary Cache-Control HTTP header specifying public and max-age response directives. This feature is enabled by default and can be controlled by the boolean -e, --cache-control-headers option or the equivalent SERVER_CACHE_CONTROL_HEADERS env. Customize HTTP headers If you want to customize HTTP headers on demand then have a look at the Custom HTTP Headers section.","title":"Cache-Control Headers"},{"location":"features/cache-control-headers/#cache-control-max-age","text":"Control headers are applied only to the following file types with the corresponding max-age values.","title":"Cache-Control Max-Age"},{"location":"features/cache-control-headers/#one-day","text":"A max-age of one day duration is used by default. Note One-day max-age for example includes html and other file types.","title":"One day"},{"location":"features/cache-control-headers/#one-hour","text":"A max-age of one hour is applied only to the following file types. atom, json, rss, xml","title":"One hour"},{"location":"features/cache-control-headers/#one-year","text":"A max-age of one year is applied only to the following file types. avif, bmp, bz2, css, doc, gif, gz, htc, ico, jpeg, jpg, js, jxl, map, mjs, mp3, mp4, ogg, ogv, pdf, png, rar, rtf, tar, tgz, wav, weba, webm, webp, woff, woff2, zip Below is an example of how to enable the feature. static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ --cache-control-headers true","title":"One year"},{"location":"features/compression-static/","text":"Pre-compressed files serving \u00b6 SWS provides support to serve pre-compressed Gzip or Brotli files directly from the disk. SWS can look up existing pre-compressed file variants ( .gz or .br ) on disk and serve them directly. The feature is disabled by default and can be controlled by the boolean --compression-static option or the equivalent SERVER_COMPRESSION_STATIC env. When the compression-static option is enabled and the pre-compressed file is found on the file system then it's served directly. Otherwise, if the pre-compressed file is not found then SWS just continues the normal workflow (trying to serve the original file requested instead). Additionally, if for example the compression option was also enabled then the requested file can be compressed on the fly right after. Compressed file type The pre-compressed file type is determined by the Accept-Encoding header value. Here is an example: static-web-server -p = 8787 -d = /var/www --compression-static = true -g = trace Below are some relevant log entries to show how the feature works. 2022-09-22T21:30:12.904102Z INFO static_web_server::handler: incoming request: method=GET uri=/downloads/Capture5.png 2022-09-22T21:30:12.904218Z TRACE static_web_server::static_files: dir: base=\"/var/www\", route=\"downloads/Capture5.png\" 2022-09-22T21:30:12.904295Z TRACE static_web_server::compression_static: preparing pre-compressed file path variant of /var/www/downloads/Capture5.png 2022-09-22T21:30:12.904509Z TRACE static_web_server::compression_static: getting metadata for pre-compressed file variant /var/www/downloads/Capture5.png.gz 2022-09-22T21:30:12.904746Z TRACE hyper::proto::h1::conn: flushed({role=server}): State { reading: KeepAlive, writing: Init, keep_alive: Busy } 2022-09-22T21:30:12.904932Z TRACE static_web_server::static_files: file found: \"/var/www/downloads/Capture5.png.gz\" 2022-09-22T21:30:12.904983Z TRACE static_web_server::compression_static: pre-compressed file variant found, serving it directly 2022-09-22T21:30:12.905095Z TRACE hyper::proto::h1::conn: flushed({role=server}): State { reading: KeepAlive, writing: Init, keep_alive: Busy } 2022-09-22T21:30:12.905836Z TRACE encode_headers: hyper::proto::h1::role: Server::encode status=200, body=Some(Unknown), req_method=Some(GET) 2022-09-22T21:30:12.905965Z TRACE encode_headers: hyper::proto::h1::role: close time.busy=138\u00b5s time.idle=35.4\u00b5s 2022-09-22T21:30:12.906236Z DEBUG hyper::proto::h1::io: flushed 242 bytes","title":"Pre-compressed files serving"},{"location":"features/compression-static/#pre-compressed-files-serving","text":"SWS provides support to serve pre-compressed Gzip or Brotli files directly from the disk. SWS can look up existing pre-compressed file variants ( .gz or .br ) on disk and serve them directly. The feature is disabled by default and can be controlled by the boolean --compression-static option or the equivalent SERVER_COMPRESSION_STATIC env. When the compression-static option is enabled and the pre-compressed file is found on the file system then it's served directly. Otherwise, if the pre-compressed file is not found then SWS just continues the normal workflow (trying to serve the original file requested instead). Additionally, if for example the compression option was also enabled then the requested file can be compressed on the fly right after. Compressed file type The pre-compressed file type is determined by the Accept-Encoding header value. Here is an example: static-web-server -p = 8787 -d = /var/www --compression-static = true -g = trace Below are some relevant log entries to show how the feature works. 2022-09-22T21:30:12.904102Z INFO static_web_server::handler: incoming request: method=GET uri=/downloads/Capture5.png 2022-09-22T21:30:12.904218Z TRACE static_web_server::static_files: dir: base=\"/var/www\", route=\"downloads/Capture5.png\" 2022-09-22T21:30:12.904295Z TRACE static_web_server::compression_static: preparing pre-compressed file path variant of /var/www/downloads/Capture5.png 2022-09-22T21:30:12.904509Z TRACE static_web_server::compression_static: getting metadata for pre-compressed file variant /var/www/downloads/Capture5.png.gz 2022-09-22T21:30:12.904746Z TRACE hyper::proto::h1::conn: flushed({role=server}): State { reading: KeepAlive, writing: Init, keep_alive: Busy } 2022-09-22T21:30:12.904932Z TRACE static_web_server::static_files: file found: \"/var/www/downloads/Capture5.png.gz\" 2022-09-22T21:30:12.904983Z TRACE static_web_server::compression_static: pre-compressed file variant found, serving it directly 2022-09-22T21:30:12.905095Z TRACE hyper::proto::h1::conn: flushed({role=server}): State { reading: KeepAlive, writing: Init, keep_alive: Busy } 2022-09-22T21:30:12.905836Z TRACE encode_headers: hyper::proto::h1::role: Server::encode status=200, body=Some(Unknown), req_method=Some(GET) 2022-09-22T21:30:12.905965Z TRACE encode_headers: hyper::proto::h1::role: close time.busy=138\u00b5s time.idle=35.4\u00b5s 2022-09-22T21:30:12.906236Z DEBUG hyper::proto::h1::io: flushed 242 bytes","title":"Pre-compressed files serving"},{"location":"features/compression/","text":"Compression \u00b6 SWS provides Gzip , Deflate and Brotli compression of HTTP responses. The compression functionality is determined by the Accept-Encoding header and is only applied to text-based web file types. MIME types compressed \u00b6 Only this list of common text-based MIME type files will be compressed either with Gzip , Deflate or Brotli via the Accept-Encoding header value. text/html text/css text/javascript text/xml text/plain text/csv text/calendar text/markdown text/x-yaml text/x-toml text/x-component application/rtf application/xhtml+xml application/javascript application/x-javascript application/json application/xml application/rss+xml application/atom+xml application/vnd.ms-fontobject font/truetype font/opentype image/svg+xml application/wasm This feature is enabled by default and can be controlled by the boolean -x, --compression option or the equivalent SERVER_COMPRESSION env. static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ --compression true","title":"Compression"},{"location":"features/compression/#compression","text":"SWS provides Gzip , Deflate and Brotli compression of HTTP responses. The compression functionality is determined by the Accept-Encoding header and is only applied to text-based web file types.","title":"Compression"},{"location":"features/compression/#mime-types-compressed","text":"Only this list of common text-based MIME type files will be compressed either with Gzip , Deflate or Brotli via the Accept-Encoding header value. text/html text/css text/javascript text/xml text/plain text/csv text/calendar text/markdown text/x-yaml text/x-toml text/x-component application/rtf application/xhtml+xml application/javascript application/x-javascript application/json application/xml application/rss+xml application/atom+xml application/vnd.ms-fontobject font/truetype font/opentype image/svg+xml application/wasm This feature is enabled by default and can be controlled by the boolean -x, --compression option or the equivalent SERVER_COMPRESSION env. static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ --compression true","title":"MIME types compressed"},{"location":"features/cors/","text":"CORS \u00b6 SWS provides optional Cross-Origin Resource Sharing (CORS) support. A list of allowed origin hosts (URLs) should be specified and separated by commas. Or an asterisk (*) can be used to allow any host. This feature is disabled by default and can be controlled by the string -c, --cors-allow-origins option or the equivalent SERVER_CORS_ALLOW_ORIGINS env. Below is an example of how to enable CORS. static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ --cors-allow-origins \"https://domain.com\" # Or use an asterisk to allow any host # --cors-allow-origins \"*\" Allowed headers \u00b6 The server also supports a list of CORS allowed headers separated by commas. This feature depends on --cors-allow-origins to be used along with this feature. It can be controlled by the string -j, --cors-allow-headers option or the equivalent SERVER_CORS_ALLOW_HEADERS env. Tips The default allowed headers value is origin, content-type . The server also supports preflight requests via the OPTIONS method. See Preflighted requests in CORS . Below is an example of how to CORS. static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ --cors-allow-origins \"https://domain.com\" --cors-allow-headers \"origin, content-type, x-requested-with\"","title":"CORS"},{"location":"features/cors/#cors","text":"SWS provides optional Cross-Origin Resource Sharing (CORS) support. A list of allowed origin hosts (URLs) should be specified and separated by commas. Or an asterisk (*) can be used to allow any host. This feature is disabled by default and can be controlled by the string -c, --cors-allow-origins option or the equivalent SERVER_CORS_ALLOW_ORIGINS env. Below is an example of how to enable CORS. static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ --cors-allow-origins \"https://domain.com\" # Or use an asterisk to allow any host # --cors-allow-origins \"*\"","title":"CORS"},{"location":"features/cors/#allowed-headers","text":"The server also supports a list of CORS allowed headers separated by commas. This feature depends on --cors-allow-origins to be used along with this feature. It can be controlled by the string -j, --cors-allow-headers option or the equivalent SERVER_CORS_ALLOW_HEADERS env. Tips The default allowed headers value is origin, content-type . The server also supports preflight requests via the OPTIONS method. See Preflighted requests in CORS . Below is an example of how to CORS. static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ --cors-allow-origins \"https://domain.com\" --cors-allow-headers \"origin, content-type, x-requested-with\"","title":"Allowed headers"},{"location":"features/custom-http-headers/","text":"Custom HTTP Headers \u00b6 SWS allows customizing the server HTTP Response headers on demand. Structure \u00b6 The Server HTTP response headers should be defined mainly as an Array of Tables . Each table entry should have two key/value pairs: One source key containing a string glob pattern . One headers key containing a set or hash table describing plain HTTP headers to apply. A particular set of HTTP headers can only be applied when a source matches against the request URI. Custom HTTP headers take precedence over existing ones Whatever custom HTTP header could replace an existing one if it was previously defined (E.g server default headers) and matches its source . The headers order is important since it determines its precedence. Example: if the feature --cache-control-headers=true is enabled but also a custom cache-control header was defined then the custom header will have priority. Source \u00b6 The source is a Glob pattern that should match against the URI that is requesting a resource file. Headers \u00b6 A set of valid plain HTTP headers to be applied. Examples \u00b6 Below are some examples of how to customize server HTTP headers in three variants. One-line version \u00b6 [advanced] [[advanced.headers]] source = \"**/*.{js,css}\" headers = { Access-Control-Allow-Origin = \"*\" , X-XSS-PROTECTION = \"1; mode=block\" } Multiline version \u00b6 [advanced] [[advanced.headers]] source = \"*.html\" [advanced.headers.headers] Cache-Control = \"public, max-age=36000\" Content-Security-Policy = \"frame-ancestors 'self'\" Strict-Transport-Security = \"max-age=63072000; includeSubDomains; preload\" Multiline version with explicit header key (dotted) \u00b6 [advanced] [[advanced.headers]] source = \"**/*.{jpg,jpeg,png,ico,gif}\" headers . Strict-Transport-Security = \"max-age=63072000; includeSubDomains; preload\"","title":"Custom HTTP Headers"},{"location":"features/custom-http-headers/#custom-http-headers","text":"SWS allows customizing the server HTTP Response headers on demand.","title":"Custom HTTP Headers"},{"location":"features/custom-http-headers/#structure","text":"The Server HTTP response headers should be defined mainly as an Array of Tables . Each table entry should have two key/value pairs: One source key containing a string glob pattern . One headers key containing a set or hash table describing plain HTTP headers to apply. A particular set of HTTP headers can only be applied when a source matches against the request URI. Custom HTTP headers take precedence over existing ones Whatever custom HTTP header could replace an existing one if it was previously defined (E.g server default headers) and matches its source . The headers order is important since it determines its precedence. Example: if the feature --cache-control-headers=true is enabled but also a custom cache-control header was defined then the custom header will have priority.","title":"Structure"},{"location":"features/custom-http-headers/#source","text":"The source is a Glob pattern that should match against the URI that is requesting a resource file.","title":"Source"},{"location":"features/custom-http-headers/#headers","text":"A set of valid plain HTTP headers to be applied.","title":"Headers"},{"location":"features/custom-http-headers/#examples","text":"Below are some examples of how to customize server HTTP headers in three variants.","title":"Examples"},{"location":"features/custom-http-headers/#one-line-version","text":"[advanced] [[advanced.headers]] source = \"**/*.{js,css}\" headers = { Access-Control-Allow-Origin = \"*\" , X-XSS-PROTECTION = \"1; mode=block\" }","title":"One-line version"},{"location":"features/custom-http-headers/#multiline-version","text":"[advanced] [[advanced.headers]] source = \"*.html\" [advanced.headers.headers] Cache-Control = \"public, max-age=36000\" Content-Security-Policy = \"frame-ancestors 'self'\" Strict-Transport-Security = \"max-age=63072000; includeSubDomains; preload\"","title":"Multiline version"},{"location":"features/custom-http-headers/#multiline-version-with-explicit-header-key-dotted","text":"[advanced] [[advanced.headers]] source = \"**/*.{jpg,jpeg,png,ico,gif}\" headers . Strict-Transport-Security = \"max-age=63072000; includeSubDomains; preload\"","title":"Multiline version with explicit header key (dotted)"},{"location":"features/directory-listing/","text":"Directory Listing \u00b6 SWS provides a directory listing feature to display the content of directories. This feature is disabled by default and can be controlled by the boolean -z, --directory-listing option or the equivalent SERVER_DIRECTORY_LISTING env. static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ --directory-listing true And here is an example of how the directory listing looks like. Relative paths for entries \u00b6 SWS uses relative paths for the directory listing entries (file or directory) and is used regardless of the redirect trailing slash feature. However, when the \"redirect trailing slash\" feature is disabled and a directory request URI doesn't contain a trailing slash then the entries will contain the path parent-dir/entry-name as the link value. Otherwise, just an entry-name link value is used (default behavior). Note also that in both cases, SWS will append a trailing slash to the entry if is a directory. Sorting \u00b6 Sorting by Name , Last modified and Size is enabled as clickable columns when the directory listing is activated via the --directory-listing=true option. You can also use the sort query parameter to sort manually by certain attributes from URI. E.g https://localhost/?sort=5 . Sorting by default \u00b6 Sometimes one wants to sort by certain attribute but by default . In that case, the default ascending or descending ordering of files/dirs by their attributes is provided by the numeric --directory-listing-order option or the equivalent SERVER_DIRECTORY_LISTING_ORDER env. To do so you have to pass a code sorting number . E.g --directory-listing-order=2 . Code numbers for sorting \u00b6 Below are the possible number code values for sorting or ordering which are grouped by attribute. Name \u00b6 0 : Ascending 1 : Descending Last modified \u00b6 2 : Ascending 3 : Descending Size \u00b6 4 : Ascending 5 : Descending Default \u00b6 6 : Unordered Tips The --directory-listing-order option depends on --directory-listing to be enabled. Use the query ?sort=NUMBER to customize the sorting via the URI. E.g https://localhost/?sort=5 (sort by size in descending order) Example: static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ --directory-listing true \\ # E.g Sorting file/dir names in descending order --directory-listing-order 1","title":"Directory Listing"},{"location":"features/directory-listing/#directory-listing","text":"SWS provides a directory listing feature to display the content of directories. This feature is disabled by default and can be controlled by the boolean -z, --directory-listing option or the equivalent SERVER_DIRECTORY_LISTING env. static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ --directory-listing true And here is an example of how the directory listing looks like.","title":"Directory Listing"},{"location":"features/directory-listing/#relative-paths-for-entries","text":"SWS uses relative paths for the directory listing entries (file or directory) and is used regardless of the redirect trailing slash feature. However, when the \"redirect trailing slash\" feature is disabled and a directory request URI doesn't contain a trailing slash then the entries will contain the path parent-dir/entry-name as the link value. Otherwise, just an entry-name link value is used (default behavior). Note also that in both cases, SWS will append a trailing slash to the entry if is a directory.","title":"Relative paths for entries"},{"location":"features/directory-listing/#sorting","text":"Sorting by Name , Last modified and Size is enabled as clickable columns when the directory listing is activated via the --directory-listing=true option. You can also use the sort query parameter to sort manually by certain attributes from URI. E.g https://localhost/?sort=5 .","title":"Sorting"},{"location":"features/directory-listing/#sorting-by-default","text":"Sometimes one wants to sort by certain attribute but by default . In that case, the default ascending or descending ordering of files/dirs by their attributes is provided by the numeric --directory-listing-order option or the equivalent SERVER_DIRECTORY_LISTING_ORDER env. To do so you have to pass a code sorting number . E.g --directory-listing-order=2 .","title":"Sorting by default"},{"location":"features/directory-listing/#code-numbers-for-sorting","text":"Below are the possible number code values for sorting or ordering which are grouped by attribute.","title":"Code numbers for sorting"},{"location":"features/directory-listing/#name","text":"0 : Ascending 1 : Descending","title":"Name"},{"location":"features/directory-listing/#last-modified","text":"2 : Ascending 3 : Descending","title":"Last modified"},{"location":"features/directory-listing/#size","text":"4 : Ascending 5 : Descending","title":"Size"},{"location":"features/directory-listing/#default","text":"6 : Unordered Tips The --directory-listing-order option depends on --directory-listing to be enabled. Use the query ?sort=NUMBER to customize the sorting via the URI. E.g https://localhost/?sort=5 (sort by size in descending order) Example: static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ --directory-listing true \\ # E.g Sorting file/dir names in descending order --directory-listing-order 1","title":"Default"},{"location":"features/docker/","text":"Docker \u00b6 SWS has first-class Docker support. It provides a Scratch as well as the latest Alpine Linux Docker images. OS/Arch \u00b6 Only the following operating systems and architectures are supported. linux/386 linux/amd64 linux/arm/v6 linux/arm/v7 linux/arm64 View all images on Docker Hub . Run a container \u00b6 To give the server a quick try just run the following commands. Tips The SWS CLI arguments can be provided directly to the container or omitted as shown below. A Docker volume like -v $HOME/my-public-dir:/public can be specified to overwrite the default root directory. Run the scratch Docker image (just the binary) docker run --rm -it -p 8787 :80 joseluisq/static-web-server:2 -g info Or run the Alpine Docker image variant docker run --rm -it -p 8787 :80 joseluisq/static-web-server:2-alpine -g info Dockerfile \u00b6 SWS Docker images can be extended as needed. Extending the scratch Docker image (just the binary) FROM joseluisq/static-web-server:2 # do stuff... Or the Alpine Docker image variant FROM joseluisq/static-web-server:2-alpine # do stuff... Docker Compose \u00b6 Below a Docker Compose example using the Traefik Proxy . version : \"3.3\" services : web : image : joseluisq/static-web-server:2 environment : # Note: those envs are customizable but also optional - SERVER_HOST=127.0.0.1 - SERVER_PORT=80 - SERVER_ROOT=/public volumes : - ./some-dir-path:/public labels : - \"traefik.enable=true\" - \"traefik.frontend.entryPoints=https\" - \"traefik.backend=localhost_dev\" - \"traefik.frontend.rule=Host:localhost.dev\" - \"traefik.port=80\" networks : - traefik_net networks : traefik_net : external : true","title":"Docker"},{"location":"features/docker/#docker","text":"SWS has first-class Docker support. It provides a Scratch as well as the latest Alpine Linux Docker images.","title":"Docker"},{"location":"features/docker/#osarch","text":"Only the following operating systems and architectures are supported. linux/386 linux/amd64 linux/arm/v6 linux/arm/v7 linux/arm64 View all images on Docker Hub .","title":"OS/Arch"},{"location":"features/docker/#run-a-container","text":"To give the server a quick try just run the following commands. Tips The SWS CLI arguments can be provided directly to the container or omitted as shown below. A Docker volume like -v $HOME/my-public-dir:/public can be specified to overwrite the default root directory. Run the scratch Docker image (just the binary) docker run --rm -it -p 8787 :80 joseluisq/static-web-server:2 -g info Or run the Alpine Docker image variant docker run --rm -it -p 8787 :80 joseluisq/static-web-server:2-alpine -g info","title":"Run a container"},{"location":"features/docker/#dockerfile","text":"SWS Docker images can be extended as needed. Extending the scratch Docker image (just the binary) FROM joseluisq/static-web-server:2 # do stuff... Or the Alpine Docker image variant FROM joseluisq/static-web-server:2-alpine # do stuff...","title":"Dockerfile"},{"location":"features/docker/#docker-compose","text":"Below a Docker Compose example using the Traefik Proxy . version : \"3.3\" services : web : image : joseluisq/static-web-server:2 environment : # Note: those envs are customizable but also optional - SERVER_HOST=127.0.0.1 - SERVER_PORT=80 - SERVER_ROOT=/public volumes : - ./some-dir-path:/public labels : - \"traefik.enable=true\" - \"traefik.frontend.entryPoints=https\" - \"traefik.backend=localhost_dev\" - \"traefik.frontend.rule=Host:localhost.dev\" - \"traefik.port=80\" networks : - traefik_net networks : traefik_net : external : true","title":"Docker Compose"},{"location":"features/error-pages/","text":"Error Pages \u00b6 SWS provides custom HTML error pages for the HTTP 404 and 50x status errors. This feature is enabled by default and can be controlled either by the string --page404 ( SERVER_ERROR_PAGE_404 ) or the --page50x ( SERVER_ERROR_PAGE_50X ) arguments. Tip Either --page404 and --page50x have defaults (optional values) so they can be specified or omitted as required. Below is an example of how to customize those HTML pages. static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ --page404 ./my-page-404.html \\ --page50x ./my-page-50x.html Fallback Page for use with Client Routers \u00b6 HTML file path that is used for GET requests when the requested path doesn't exist. The fallback page is served with a 200 status code, useful when using client routers like React Router or similar. If the path is not specified or simply doesn't exist then this feature will not be active. It can be set with the SERVER_FALLBACK_PAGE environment variable or with the CLI argument --page-fallback . static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ --page-fallback ./my-public-dir/index.html","title":"Error Pages"},{"location":"features/error-pages/#error-pages","text":"SWS provides custom HTML error pages for the HTTP 404 and 50x status errors. This feature is enabled by default and can be controlled either by the string --page404 ( SERVER_ERROR_PAGE_404 ) or the --page50x ( SERVER_ERROR_PAGE_50X ) arguments. Tip Either --page404 and --page50x have defaults (optional values) so they can be specified or omitted as required. Below is an example of how to customize those HTML pages. static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ --page404 ./my-page-404.html \\ --page50x ./my-page-50x.html","title":"Error Pages"},{"location":"features/error-pages/#fallback-page-for-use-with-client-routers","text":"HTML file path that is used for GET requests when the requested path doesn't exist. The fallback page is served with a 200 status code, useful when using client routers like React Router or similar. If the path is not specified or simply doesn't exist then this feature will not be active. It can be set with the SERVER_FALLBACK_PAGE environment variable or with the CLI argument --page-fallback . static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ --page-fallback ./my-public-dir/index.html","title":"Fallback Page for use with Client Routers"},{"location":"features/file-descriptor-socket-passing/","text":"File Descriptor Socket Passing \u00b6 SWS provides the ability to accept a socket listener as a file descriptor for use in sandboxing and on-demand applications via systemd (Linux), launchd (Macos) or similar. Tip The Socket Activation model is an alternative to TCP port binding. Socket activation is supported by the -f, --fd option or the equivalent SERVER_LISTEN_FD env. If you are using inetd , its \" wait \" option should be used in conjunction with static-web-server's --fd 0 option. Systemd \u00b6 If you're using systemd on Linux, there is a fully working example in the SWS Git repository under the . /systemd directory. Testing \u00b6 Alternatively, the lightweight systemfd utility may be useful, especially for testing purposes. For example, using systemfd utility as follow: systemfd --no-pid -s http::8091 -- path/to/static-web-server --fd 0","title":"File Descriptor Socket Passing"},{"location":"features/file-descriptor-socket-passing/#file-descriptor-socket-passing","text":"SWS provides the ability to accept a socket listener as a file descriptor for use in sandboxing and on-demand applications via systemd (Linux), launchd (Macos) or similar. Tip The Socket Activation model is an alternative to TCP port binding. Socket activation is supported by the -f, --fd option or the equivalent SERVER_LISTEN_FD env. If you are using inetd , its \" wait \" option should be used in conjunction with static-web-server's --fd 0 option.","title":"File Descriptor Socket Passing"},{"location":"features/file-descriptor-socket-passing/#systemd","text":"If you're using systemd on Linux, there is a fully working example in the SWS Git repository under the . /systemd directory.","title":"Systemd"},{"location":"features/file-descriptor-socket-passing/#testing","text":"Alternatively, the lightweight systemfd utility may be useful, especially for testing purposes. For example, using systemfd utility as follow: systemfd --no-pid -s http::8091 -- path/to/static-web-server --fd 0","title":"Testing"},{"location":"features/graceful-shutdown/","text":"Graceful Shutdown \u00b6 SWS can terminate gracefully in what is known as a graceful shutdown process. It means that when a SIGTERM termination signal is caught the server will stop receiving more requests immediately but in turn, it will continue processing all existing requests until they are completed (or closed). Tips In BSD/Unix-like systems, SWS will start the graceful shutdown process when a SIGTERM , SIGINT or SIGQUIT termination signal is caught. In Windows systems otherwise, SWS will start the graceful shutdown process right after a CTRL + C . This is used to abort the current task. Grace Period \u00b6 Sometimes one wants to control the graceful shutdown process for different reasons. For example during Kubernetes rollouts . In these situations, SWS allows delaying the graceful shutdown process right after a SIGTERM providing a grace period in seconds. The feature is disabled by default and can be controlled by the numeric -q, --grace-period option or its equivalent SERVER_GRACE_PERIOD env. Tip The maximum grace period value is 255 seconds (4.25 min). The default value is 0 (no delay). Here is an example of delaying the graceful shutdown process by 10 seconds after a SIGTERM . static-web-server -p 8787 -d ./public/ -g trace --grace-period 10","title":"Graceful Shutdown"},{"location":"features/graceful-shutdown/#graceful-shutdown","text":"SWS can terminate gracefully in what is known as a graceful shutdown process. It means that when a SIGTERM termination signal is caught the server will stop receiving more requests immediately but in turn, it will continue processing all existing requests until they are completed (or closed). Tips In BSD/Unix-like systems, SWS will start the graceful shutdown process when a SIGTERM , SIGINT or SIGQUIT termination signal is caught. In Windows systems otherwise, SWS will start the graceful shutdown process right after a CTRL + C . This is used to abort the current task.","title":"Graceful Shutdown"},{"location":"features/graceful-shutdown/#grace-period","text":"Sometimes one wants to control the graceful shutdown process for different reasons. For example during Kubernetes rollouts . In these situations, SWS allows delaying the graceful shutdown process right after a SIGTERM providing a grace period in seconds. The feature is disabled by default and can be controlled by the numeric -q, --grace-period option or its equivalent SERVER_GRACE_PERIOD env. Tip The maximum grace period value is 255 seconds (4.25 min). The default value is 0 (no delay). Here is an example of delaying the graceful shutdown process by 10 seconds after a SIGTERM . static-web-server -p 8787 -d ./public/ -g trace --grace-period 10","title":"Grace Period"},{"location":"features/http-methods/","text":"HTTP Methods Supported \u00b6 SWS only supports GET , HEAD and OPTIONS HTTP methods. OPTIONS Method \u00b6 Identifying allowed request methods \u00b6 The HTTP OPTIONS method can be used to send a request to check for permitted communication options for either a given URL or server. Example using an HTTP client. curl -I -X OPTIONS http://localhost:8787/assets/main.js # HTTP/1.1 204 No Content # allow: OPTIONS, HEAD, GET # accept-ranges: bytes # cache-control: public, max-age=31536000 # date: Thu, 10 Mar 2022 21:26:01 GMT Preflighted requests in CORS \u00b6 The HTTP OPTIONS method can also be used to send a request asking if it is acceptable to send requests to the server and if it is aware of using specific methods and headers. Tip If an Access-Control-Request-Method or Access-Control-Request-Headers value is not allowed then the server replies with a 403 Forbidden HTTP error. See CORS feature for more details. Example using an HTTP client. curl http://localhost:8787/assets/main.js \\ -I -X OPTIONS \\ -H \"Access-Control-Request-Method: HEAD\" \\ -H \"Access-Control-Request-Headers: content-type\" \\ -H \"Origin: http://localhost:8787\" # HTTP/1.1 204 No Content # access-control-allow-origin: http://localhost:8787 # accept-ranges: bytes # access-control-allow-headers: content-type, origin # access-control-allow-methods: GET, OPTIONS, HEAD # cache-control: public, max-age=31536000 # date: Thu, 10 Mar 2022 21:45:55 GMT","title":"HTTP Methods"},{"location":"features/http-methods/#http-methods-supported","text":"SWS only supports GET , HEAD and OPTIONS HTTP methods.","title":"HTTP Methods Supported"},{"location":"features/http-methods/#options-method","text":"","title":"OPTIONS Method"},{"location":"features/http-methods/#identifying-allowed-request-methods","text":"The HTTP OPTIONS method can be used to send a request to check for permitted communication options for either a given URL or server. Example using an HTTP client. curl -I -X OPTIONS http://localhost:8787/assets/main.js # HTTP/1.1 204 No Content # allow: OPTIONS, HEAD, GET # accept-ranges: bytes # cache-control: public, max-age=31536000 # date: Thu, 10 Mar 2022 21:26:01 GMT","title":"Identifying allowed request methods"},{"location":"features/http-methods/#preflighted-requests-in-cors","text":"The HTTP OPTIONS method can also be used to send a request asking if it is acceptable to send requests to the server and if it is aware of using specific methods and headers. Tip If an Access-Control-Request-Method or Access-Control-Request-Headers value is not allowed then the server replies with a 403 Forbidden HTTP error. See CORS feature for more details. Example using an HTTP client. curl http://localhost:8787/assets/main.js \\ -I -X OPTIONS \\ -H \"Access-Control-Request-Method: HEAD\" \\ -H \"Access-Control-Request-Headers: content-type\" \\ -H \"Origin: http://localhost:8787\" # HTTP/1.1 204 No Content # access-control-allow-origin: http://localhost:8787 # accept-ranges: bytes # access-control-allow-headers: content-type, origin # access-control-allow-methods: GET, OPTIONS, HEAD # cache-control: public, max-age=31536000 # date: Thu, 10 Mar 2022 21:45:55 GMT","title":"Preflighted requests in CORS"},{"location":"features/http1/","text":"HTTP/1 \u00b6 The HTTP/1 is the protocol by default and can be used to specify a host address via the -a, --host ( SERVER_HOST ) argument, the port of the host via -p, --port ( SERVER_PORT ) and the directory of the static files using the -d, --root ( SERVER_ROOT ) argument. Tips Either --host , --port and --root have defaults (optional values) so they can be specified or omitted as required. The server provides Termination Signal handling with Graceful Shutdown ability by default. Below is an example of how to run the server using HTTP/1. static-web-server \\ --host 127 .0.0.1 \\ --port 8787 \\ --root ./my-public-dir","title":"HTTP/1"},{"location":"features/http1/#http1","text":"The HTTP/1 is the protocol by default and can be used to specify a host address via the -a, --host ( SERVER_HOST ) argument, the port of the host via -p, --port ( SERVER_PORT ) and the directory of the static files using the -d, --root ( SERVER_ROOT ) argument. Tips Either --host , --port and --root have defaults (optional values) so they can be specified or omitted as required. The server provides Termination Signal handling with Graceful Shutdown ability by default. Below is an example of how to run the server using HTTP/1. static-web-server \\ --host 127 .0.0.1 \\ --port 8787 \\ --root ./my-public-dir","title":"HTTP/1"},{"location":"features/http2-tls/","text":"HTTP/2 and TLS \u00b6 SWS provides HTTP/2 protocol and TLS support. This feature is disabled by default and can be activated via the boolean -t, --http2 option as well as string arguments --http2-tls-cert (TLS certificate file path) and --http2-tls-key (private key file path). Tips Either --host , --port and --root have defaults (optional values) so they can be specified or omitted as required. Don't forget to adjust the proper --port value for the HTTP/2 & TLS feature. When this feature is enabled ( --http2=true ) then the security headers are also enabled automatically. The server provides Termination Signal handling with Graceful Shutdown ability by default. static-web-server \\ --host 127 .0.0.1 \\ --port 8787 \\ --root ./my-public-dir \\ --http2 true \\ --http2-tls-cert ./my-tls.cert \\ --http2-tls-key ./my-tls.key","title":"HTTP/2 and TLS"},{"location":"features/http2-tls/#http2-and-tls","text":"SWS provides HTTP/2 protocol and TLS support. This feature is disabled by default and can be activated via the boolean -t, --http2 option as well as string arguments --http2-tls-cert (TLS certificate file path) and --http2-tls-key (private key file path). Tips Either --host , --port and --root have defaults (optional values) so they can be specified or omitted as required. Don't forget to adjust the proper --port value for the HTTP/2 & TLS feature. When this feature is enabled ( --http2=true ) then the security headers are also enabled automatically. The server provides Termination Signal handling with Graceful Shutdown ability by default. static-web-server \\ --host 127 .0.0.1 \\ --port 8787 \\ --root ./my-public-dir \\ --http2 true \\ --http2-tls-cert ./my-tls.cert \\ --http2-tls-key ./my-tls.key","title":"HTTP/2 and TLS"},{"location":"features/logging/","text":"Logging \u00b6 SWS provides logging support by just specifying a log level in lower case. The values allowed are error , warn , info , debug and trace . The default value is error . This feature is enabled by default and can be controlled by the string -g, --log-level option or the equivalent SERVER_LOG_LEVEL env. Below is an example of how to adjust the log level. static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ --log-level \"trace\" Log Remote Addresses \u00b6 SWS provides Remote Address (IP) logging for every request via an INFO log level. This feature is disabled by default and can be enabled by the boolean --log-remote-address option or the equivalent SERVER_LOG_REMOTE_ADDRESS env. If the feature is enabled then log entries for requests will contain a remote_addr section with the remote address (IP) value. Otherwise, it will be empty. Log entry example: 2022-05-23T22:24:50.519540Z INFO static_web_server::handler: incoming request: method=GET uri=/ remote_addr=192.168.1.126:57625 Below is an example of how to enable Remote Address (IP) logging. Note the last two entries. static-web-server -a \"0.0.0.0\" -p 8080 -d docker/public/ -g info --log-remote-address = true # 2022-05-23T22:24:44.523057Z INFO static_web_server::logger: logging level: info # 2022-05-23T22:24:44.523856Z INFO static_web_server::server: server bound to TCP socket 0.0.0.0:8080 # 2022-05-23T22:24:44.523962Z INFO static_web_server::server: runtime worker threads: 4 # 2022-05-23T22:24:44.523989Z INFO static_web_server::server: security headers: enabled=false # 2022-05-23T22:24:44.524006Z INFO static_web_server::server: auto compression: enabled=true # 2022-05-23T22:24:44.524061Z INFO static_web_server::server: directory listing: enabled=false # 2022-05-23T22:24:44.524097Z INFO static_web_server::server: directory listing order code: 6 # 2022-05-23T22:24:44.524133Z INFO static_web_server::server: cache control headers: enabled=true # 2022-05-23T22:24:44.524191Z INFO static_web_server::server: basic authentication: enabled=false # 2022-05-23T22:24:44.524210Z INFO static_web_server::server: grace period before graceful shutdown: 0s # 2022-05-23T22:24:44.524527Z INFO Server::start_server{addr_str=\"0.0.0.0:8080\" threads=4}: static_web_server::server: close time.busy=0.00ns time.idle=10.6\u00b5s # 2022-05-23T22:24:44.524585Z INFO static_web_server::server: listening on http://0.0.0.0:8080 # 2022-05-23T22:24:44.524614Z INFO static_web_server::server: press ctrl+c to shut down the server # 2022-05-23T22:24:50.519540Z INFO static_web_server::handler: incoming request: method=GET uri=/ remote_addr=192.168.1.126:57625 # 2022-05-23T22:25:26.516841Z INFO static_web_server::handler: incoming request: method=GET uri=/favicon.ico remote_addr=192.168.1.126:57625 Log Real Remote IP \u00b6 When used behind reverse proxy, reported remote_addr indicate proxy internal IP address and port, and not client real remote IP. Proxy server can be configured to provide X-Forwarded-For header , containing comma-separated list of IP addresses, starting with client real remote IP , and all following intermediate proxies (if any). When Remote Address (IP) logging is enabled , and X-Forwarded-For header is present and correctly formatted, then log entries for requests will contain a real_remote_ip section with IP of remote client, as reported by this header . We can simulate request as from behind reverse proxy with additional intermediate-proxy with following command: curl --header \"X-Forwarded-For: 203.0.113.195, 2001:db8:85a3:8d3:1319:8a2e:370:7348\" http://0.0.0.0:8080 Log entry for such case will look like: 2022-05-23T22:24:50.519540Z INFO static_web_server::handler: incoming request: method=GET uri=/ remote_addr=192.168.1.126:57625 real_remote_ip=203.0.113.195 SWS will parse X-Forwarded-For header, and if format of provided IP is invalid - it will be ignored to prevent log poisoning attacks. In such case real_remote_ip section will not be added. Example from above, but with invalid header: curl --header \"X-Forwarded-For: <iframe src=//malware.attack>\" http://0.0.0.0:8080 2022-05-23T22:24:50.519540Z INFO static_web_server::handler: incoming request: method=GET uri=/ remote_addr=192.168.1.126:57625 Be aware, that contents of X-Forwarded-For header can be augumented by all proxies in the chain, and as such - remote IP address reported by it may not be trusted.","title":"Logging"},{"location":"features/logging/#logging","text":"SWS provides logging support by just specifying a log level in lower case. The values allowed are error , warn , info , debug and trace . The default value is error . This feature is enabled by default and can be controlled by the string -g, --log-level option or the equivalent SERVER_LOG_LEVEL env. Below is an example of how to adjust the log level. static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ --log-level \"trace\"","title":"Logging"},{"location":"features/logging/#log-remote-addresses","text":"SWS provides Remote Address (IP) logging for every request via an INFO log level. This feature is disabled by default and can be enabled by the boolean --log-remote-address option or the equivalent SERVER_LOG_REMOTE_ADDRESS env. If the feature is enabled then log entries for requests will contain a remote_addr section with the remote address (IP) value. Otherwise, it will be empty. Log entry example: 2022-05-23T22:24:50.519540Z INFO static_web_server::handler: incoming request: method=GET uri=/ remote_addr=192.168.1.126:57625 Below is an example of how to enable Remote Address (IP) logging. Note the last two entries. static-web-server -a \"0.0.0.0\" -p 8080 -d docker/public/ -g info --log-remote-address = true # 2022-05-23T22:24:44.523057Z INFO static_web_server::logger: logging level: info # 2022-05-23T22:24:44.523856Z INFO static_web_server::server: server bound to TCP socket 0.0.0.0:8080 # 2022-05-23T22:24:44.523962Z INFO static_web_server::server: runtime worker threads: 4 # 2022-05-23T22:24:44.523989Z INFO static_web_server::server: security headers: enabled=false # 2022-05-23T22:24:44.524006Z INFO static_web_server::server: auto compression: enabled=true # 2022-05-23T22:24:44.524061Z INFO static_web_server::server: directory listing: enabled=false # 2022-05-23T22:24:44.524097Z INFO static_web_server::server: directory listing order code: 6 # 2022-05-23T22:24:44.524133Z INFO static_web_server::server: cache control headers: enabled=true # 2022-05-23T22:24:44.524191Z INFO static_web_server::server: basic authentication: enabled=false # 2022-05-23T22:24:44.524210Z INFO static_web_server::server: grace period before graceful shutdown: 0s # 2022-05-23T22:24:44.524527Z INFO Server::start_server{addr_str=\"0.0.0.0:8080\" threads=4}: static_web_server::server: close time.busy=0.00ns time.idle=10.6\u00b5s # 2022-05-23T22:24:44.524585Z INFO static_web_server::server: listening on http://0.0.0.0:8080 # 2022-05-23T22:24:44.524614Z INFO static_web_server::server: press ctrl+c to shut down the server # 2022-05-23T22:24:50.519540Z INFO static_web_server::handler: incoming request: method=GET uri=/ remote_addr=192.168.1.126:57625 # 2022-05-23T22:25:26.516841Z INFO static_web_server::handler: incoming request: method=GET uri=/favicon.ico remote_addr=192.168.1.126:57625","title":"Log Remote Addresses"},{"location":"features/logging/#log-real-remote-ip","text":"When used behind reverse proxy, reported remote_addr indicate proxy internal IP address and port, and not client real remote IP. Proxy server can be configured to provide X-Forwarded-For header , containing comma-separated list of IP addresses, starting with client real remote IP , and all following intermediate proxies (if any). When Remote Address (IP) logging is enabled , and X-Forwarded-For header is present and correctly formatted, then log entries for requests will contain a real_remote_ip section with IP of remote client, as reported by this header . We can simulate request as from behind reverse proxy with additional intermediate-proxy with following command: curl --header \"X-Forwarded-For: 203.0.113.195, 2001:db8:85a3:8d3:1319:8a2e:370:7348\" http://0.0.0.0:8080 Log entry for such case will look like: 2022-05-23T22:24:50.519540Z INFO static_web_server::handler: incoming request: method=GET uri=/ remote_addr=192.168.1.126:57625 real_remote_ip=203.0.113.195 SWS will parse X-Forwarded-For header, and if format of provided IP is invalid - it will be ignored to prevent log poisoning attacks. In such case real_remote_ip section will not be added. Example from above, but with invalid header: curl --header \"X-Forwarded-For: <iframe src=//malware.attack>\" http://0.0.0.0:8080 2022-05-23T22:24:50.519540Z INFO static_web_server::handler: incoming request: method=GET uri=/ remote_addr=192.168.1.126:57625 Be aware, that contents of X-Forwarded-For header can be augumented by all proxies in the chain, and as such - remote IP address reported by it may not be trusted.","title":"Log Real Remote IP"},{"location":"features/security-headers/","text":"Security Headers \u00b6 SWS provides several security headers support. When the HTTP/2 feature is activated security headers are enabled automatically. This feature is disabled by default on HTTP/1 and can be controlled by the boolean --security-headers option or the equivalent SERVER_SECURITY_HEADERS env. Customize HTTP headers If you want to customize HTTP headers on demand then have a look at the Custom HTTP Headers section. Headers included \u00b6 The following headers are included by default. Strict-Transport-Security: max-age=63072000; includeSubDomains; preload\" (2 years max-age) X-Frame-Options: DENY X-XSS-Protection: 1; mode=block X-Content-Type-Options: nosniff Content-Security-Policy: frame-ancestors","title":"Security Headers"},{"location":"features/security-headers/#security-headers","text":"SWS provides several security headers support. When the HTTP/2 feature is activated security headers are enabled automatically. This feature is disabled by default on HTTP/1 and can be controlled by the boolean --security-headers option or the equivalent SERVER_SECURITY_HEADERS env. Customize HTTP headers If you want to customize HTTP headers on demand then have a look at the Custom HTTP Headers section.","title":"Security Headers"},{"location":"features/security-headers/#headers-included","text":"The following headers are included by default. Strict-Transport-Security: max-age=63072000; includeSubDomains; preload\" (2 years max-age) X-Frame-Options: DENY X-XSS-Protection: 1; mode=block X-Content-Type-Options: nosniff Content-Security-Policy: frame-ancestors","title":"Headers included"},{"location":"features/trailing-slash-redirect/","text":"Trailing Slash Redirect \u00b6 SWS provides automatic trailing slash redirect support for directory requests. This feature is enabled by default and can be controlled by the boolean --redirect-trailing-slash option or the equivalent SERVER_REDIRECT_TRAILING_SLASH env. static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ --redirect-trailing-slash true","title":"Trailing Slash Redirect"},{"location":"features/trailing-slash-redirect/#trailing-slash-redirect","text":"SWS provides automatic trailing slash redirect support for directory requests. This feature is enabled by default and can be controlled by the boolean --redirect-trailing-slash option or the equivalent SERVER_REDIRECT_TRAILING_SLASH env. static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ --redirect-trailing-slash true","title":"Trailing Slash Redirect"},{"location":"features/url-redirects/","text":"URL Redirects \u00b6 SWS provides the ability to redirect request URLs with pattern matching support. URI redirects are particularly useful with pattern matching ( globs ). Use them for example to prevent broken links if you've moved a page or to shorten URLs. Structure \u00b6 The URL redirect rules should be defined mainly as an Array of Tables . Each table entry should have the following key/value pairs: One source key containing a string glob pattern . One destination string containing the local file path or a full URL. One kind number containing the HTTP response code. Note The incoming request(s) will reach the destination only if the request(s) URI matches the source pattern. Source \u00b6 The source is a Glob pattern that should match against the URI that is requesting a resource file. Destination \u00b6 A local file path must exist. It can be a local path /some/directory/file.html or a full URL. It is worth noting that the / at the beginning indicates the server's root directory. Kind \u00b6 It indicates the HTTP response code. The values can be: 301 for \"Moved Permanently\" 302 for \"Found\" (Temporary Redirect) Examples \u00b6 [advanced] ### URL Redirects [[advanced.redirects]] source = \"**/*.{jpg,jpeg}\" destination = \"/images/generic1.png\" kind = 301 [[advanced.redirects]] source = \"/index.html\" destination = \"https://sws.joseluisq.net\" kind = 302","title":"URL Redirects"},{"location":"features/url-redirects/#url-redirects","text":"SWS provides the ability to redirect request URLs with pattern matching support. URI redirects are particularly useful with pattern matching ( globs ). Use them for example to prevent broken links if you've moved a page or to shorten URLs.","title":"URL Redirects"},{"location":"features/url-redirects/#structure","text":"The URL redirect rules should be defined mainly as an Array of Tables . Each table entry should have the following key/value pairs: One source key containing a string glob pattern . One destination string containing the local file path or a full URL. One kind number containing the HTTP response code. Note The incoming request(s) will reach the destination only if the request(s) URI matches the source pattern.","title":"Structure"},{"location":"features/url-redirects/#source","text":"The source is a Glob pattern that should match against the URI that is requesting a resource file.","title":"Source"},{"location":"features/url-redirects/#destination","text":"A local file path must exist. It can be a local path /some/directory/file.html or a full URL. It is worth noting that the / at the beginning indicates the server's root directory.","title":"Destination"},{"location":"features/url-redirects/#kind","text":"It indicates the HTTP response code. The values can be: 301 for \"Moved Permanently\" 302 for \"Found\" (Temporary Redirect)","title":"Kind"},{"location":"features/url-redirects/#examples","text":"[advanced] ### URL Redirects [[advanced.redirects]] source = \"**/*.{jpg,jpeg}\" destination = \"/images/generic1.png\" kind = 301 [[advanced.redirects]] source = \"/index.html\" destination = \"https://sws.joseluisq.net\" kind = 302","title":"Examples"},{"location":"features/url-rewrites/","text":"URL Rewrites \u00b6 SWS provides the ability to rewrite request URLs with pattern matching support. URI rewrites are particularly useful with pattern matching ( globs ), as the server can accept any URL that matches the pattern and let the client-side code decide what to display. Structure \u00b6 The URL rewrite rules should be defined mainly as an Array of Tables . Each table entry should have two key/value pairs: One source key containing a string glob pattern . One destination string containing the local file path. Note The incoming request(s) will reach the destination only if the request(s) URI matches the source pattern. Source \u00b6 The source is a Glob pattern that should match against the URI that is requesting a resource file. Destination \u00b6 A local file path which must exist. It has to look something like /some/directory/file.html . It is worth noting that the / at the beginning indicates the server's root directory. Examples \u00b6 [advanced] ### URL Rewrites [[advanced.rewrites]] source = \"**/*.{png,ico,gif}\" destination = \"/assets/generic1.png\" [[advanced.rewrites]] source = \"**/*.{jpg,jpeg}\" destination = \"/images/generic2.png\"","title":"URL Rewrites"},{"location":"features/url-rewrites/#url-rewrites","text":"SWS provides the ability to rewrite request URLs with pattern matching support. URI rewrites are particularly useful with pattern matching ( globs ), as the server can accept any URL that matches the pattern and let the client-side code decide what to display.","title":"URL Rewrites"},{"location":"features/url-rewrites/#structure","text":"The URL rewrite rules should be defined mainly as an Array of Tables . Each table entry should have two key/value pairs: One source key containing a string glob pattern . One destination string containing the local file path. Note The incoming request(s) will reach the destination only if the request(s) URI matches the source pattern.","title":"Structure"},{"location":"features/url-rewrites/#source","text":"The source is a Glob pattern that should match against the URI that is requesting a resource file.","title":"Source"},{"location":"features/url-rewrites/#destination","text":"A local file path which must exist. It has to look something like /some/directory/file.html . It is worth noting that the / at the beginning indicates the server's root directory.","title":"Destination"},{"location":"features/url-rewrites/#examples","text":"[advanced] ### URL Rewrites [[advanced.rewrites]] source = \"**/*.{png,ico,gif}\" destination = \"/assets/generic1.png\" [[advanced.rewrites]] source = \"**/*.{jpg,jpeg}\" destination = \"/images/generic2.png\"","title":"Examples"},{"location":"features/windows-service/","text":"Windows Service \u00b6 SWS can be also executed in a Windows Service context. Therefore it also provides a subcommand to install SWS as a Windows Service. This feature is disabled by default and can be controlled by the boolean -s, --windows-service option or the equivalent SERVER_WINDOWS_SERVICE env. Static Web Server running as a Windows Service and displayed by 'services.msc' application. Important Notes \u00b6 This is an obvious Windows platform-specific feature. The SWS Windows Service option ( windows-service ) doesn't create a Windows Service per se. It just tells SWS to run in a Windows Service context. So it's necessary to install the SWS Windows Service first. Enabling the windows-service option via the configuration file is unnecessary if you use the install subcommand to create the service since it already enables it during the service installation. However, you can enable the windows-service option for example if you plan to create your own Windows Service and use SWS with it. Service privileges \u00b6 To either install or uninstall the SWS Windows service requires administrator privileges, so make sure to open the terminal application as administrator or give your Powershell session enough privileges otherwise you will get an \"Access is denied\" error. We recommend a Powershell session with administrator privileges. Install the service \u00b6 To install the SWS service use the install command along with a configuration file for further SWS options customization. Make sure to provide a configuration file to run SWS service properly. In particular, configure the server address , port and root directory accordingly. If not so then the service might not start. The following command will create the SWS service called static-web-server with a \" Static Web Server \" display name. static-web-server . exe -w C :\\ Users \\ MyUser \\ config . toml install # Windows Service (static-web-server) is installed successfully! # Start the service typing: sc.exe start \"static-web-server\" (it requires administrator privileges) or using the 'services.msc' application. Interact with the service \u00b6 SWS doesn't provide a way to interact with Windows services directly. Instead, use the Windows built-in tools to interact with the SWS service once created. For that purpose, you can use either the Windows sc.exe or the services.msc application. For example, using sc.exe you can show the SWS service configuration used once installed. sc . exe qc \"static-web-server\" # [SC] QueryServiceConfig SUCCESS # SERVICE_NAME: static-web-server # TYPE : 10 WIN32_OWN_PROCESS # START_TYPE : 3 DEMAND_START # ERROR_CONTROL : 1 NORMAL # BINARY_PATH_NAME : C:\\Users\\MyUser\\static-web-server.exe # --windows-service=true # --config-file=C:\\Users\\MyUser\\config.toml # LOAD_ORDER_GROUP : # TAG : 0 # DISPLAY_NAME : Static Web Server # DEPENDENCIES : # SERVICE_START_NAME : LocalSystem Remember that alternatively, you can also use the services.msc application if you prefer GUI service control. Start \u00b6 To start the service use the following sc.exe command. sc . exe start \"static-web-server\" # SERVICE_NAME: static-web-server # TYPE : 10 WIN32_OWN_PROCESS # STATE : 2 START_PENDING # (NOT_STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN) # WIN32_EXIT_CODE : 0 (0x0) # SERVICE_EXIT_CODE : 0 (0x0) # CHECKPOINT : 0x0 # WAIT_HINT : 0x7d0 # PID : 3068 # FLAGS : Status \u00b6 To show the service status use the following sc.exe command. sc . exe query \"static-web-server\" # SERVICE_NAME: static-web-server # TYPE : 10 WIN32_OWN_PROCESS # STATE : 4 RUNNING # (STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN) # WIN32_EXIT_CODE : 0 (0x0) # SERVICE_EXIT_CODE : 0 (0x0) # CHECKPOINT : 0x0 # WAIT_HINT : 0x0 Stop \u00b6 To stop the service use the following sc.exe command. sc . exe stop \"static-web-server\" # SERVICE_NAME: static-web-server # TYPE : 10 WIN32_OWN_PROCESS # STATE : 3 STOP_PENDING # (STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN) # WIN32_EXIT_CODE : 0 (0x0) # SERVICE_EXIT_CODE : 0 (0x0) # CHECKPOINT : 0x2 # WAIT_HINT : 0xbb8 After stopping the service you can also show its status. sc . exe query \"static-web-server\" # SERVICE_NAME: static-web-server # TYPE : 10 WIN32_OWN_PROCESS # STATE : 1 STOPPED # WIN32_EXIT_CODE : 0 (0x0) # SERVICE_EXIT_CODE : 0 (0x0) # CHECKPOINT : 0x0 # WAIT_HINT : 0x0 Uninstall the service \u00b6 To uninstall the SWS service just use the uninstall command. Note that the service should be first stopped before uninstalling it. static-web-server . exe uninstall # Windows Service (static-web-server) is uninstalled! After uninstalling the service you can verify if removed. sc . exe qc \"static-web-server\" # [SC] OpenService FAILED 1060: # # The specified service does not exist as an installed service.","title":"Windows Service"},{"location":"features/windows-service/#windows-service","text":"SWS can be also executed in a Windows Service context. Therefore it also provides a subcommand to install SWS as a Windows Service. This feature is disabled by default and can be controlled by the boolean -s, --windows-service option or the equivalent SERVER_WINDOWS_SERVICE env. Static Web Server running as a Windows Service and displayed by 'services.msc' application.","title":"Windows Service"},{"location":"features/windows-service/#important-notes","text":"This is an obvious Windows platform-specific feature. The SWS Windows Service option ( windows-service ) doesn't create a Windows Service per se. It just tells SWS to run in a Windows Service context. So it's necessary to install the SWS Windows Service first. Enabling the windows-service option via the configuration file is unnecessary if you use the install subcommand to create the service since it already enables it during the service installation. However, you can enable the windows-service option for example if you plan to create your own Windows Service and use SWS with it.","title":"Important Notes"},{"location":"features/windows-service/#service-privileges","text":"To either install or uninstall the SWS Windows service requires administrator privileges, so make sure to open the terminal application as administrator or give your Powershell session enough privileges otherwise you will get an \"Access is denied\" error. We recommend a Powershell session with administrator privileges.","title":"Service privileges"},{"location":"features/windows-service/#install-the-service","text":"To install the SWS service use the install command along with a configuration file for further SWS options customization. Make sure to provide a configuration file to run SWS service properly. In particular, configure the server address , port and root directory accordingly. If not so then the service might not start. The following command will create the SWS service called static-web-server with a \" Static Web Server \" display name. static-web-server . exe -w C :\\ Users \\ MyUser \\ config . toml install # Windows Service (static-web-server) is installed successfully! # Start the service typing: sc.exe start \"static-web-server\" (it requires administrator privileges) or using the 'services.msc' application.","title":"Install the service"},{"location":"features/windows-service/#interact-with-the-service","text":"SWS doesn't provide a way to interact with Windows services directly. Instead, use the Windows built-in tools to interact with the SWS service once created. For that purpose, you can use either the Windows sc.exe or the services.msc application. For example, using sc.exe you can show the SWS service configuration used once installed. sc . exe qc \"static-web-server\" # [SC] QueryServiceConfig SUCCESS # SERVICE_NAME: static-web-server # TYPE : 10 WIN32_OWN_PROCESS # START_TYPE : 3 DEMAND_START # ERROR_CONTROL : 1 NORMAL # BINARY_PATH_NAME : C:\\Users\\MyUser\\static-web-server.exe # --windows-service=true # --config-file=C:\\Users\\MyUser\\config.toml # LOAD_ORDER_GROUP : # TAG : 0 # DISPLAY_NAME : Static Web Server # DEPENDENCIES : # SERVICE_START_NAME : LocalSystem Remember that alternatively, you can also use the services.msc application if you prefer GUI service control.","title":"Interact with the service"},{"location":"features/windows-service/#start","text":"To start the service use the following sc.exe command. sc . exe start \"static-web-server\" # SERVICE_NAME: static-web-server # TYPE : 10 WIN32_OWN_PROCESS # STATE : 2 START_PENDING # (NOT_STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN) # WIN32_EXIT_CODE : 0 (0x0) # SERVICE_EXIT_CODE : 0 (0x0) # CHECKPOINT : 0x0 # WAIT_HINT : 0x7d0 # PID : 3068 # FLAGS :","title":"Start"},{"location":"features/windows-service/#status","text":"To show the service status use the following sc.exe command. sc . exe query \"static-web-server\" # SERVICE_NAME: static-web-server # TYPE : 10 WIN32_OWN_PROCESS # STATE : 4 RUNNING # (STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN) # WIN32_EXIT_CODE : 0 (0x0) # SERVICE_EXIT_CODE : 0 (0x0) # CHECKPOINT : 0x0 # WAIT_HINT : 0x0","title":"Status"},{"location":"features/windows-service/#stop","text":"To stop the service use the following sc.exe command. sc . exe stop \"static-web-server\" # SERVICE_NAME: static-web-server # TYPE : 10 WIN32_OWN_PROCESS # STATE : 3 STOP_PENDING # (STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN) # WIN32_EXIT_CODE : 0 (0x0) # SERVICE_EXIT_CODE : 0 (0x0) # CHECKPOINT : 0x2 # WAIT_HINT : 0xbb8 After stopping the service you can also show its status. sc . exe query \"static-web-server\" # SERVICE_NAME: static-web-server # TYPE : 10 WIN32_OWN_PROCESS # STATE : 1 STOPPED # WIN32_EXIT_CODE : 0 (0x0) # SERVICE_EXIT_CODE : 0 (0x0) # CHECKPOINT : 0x0 # WAIT_HINT : 0x0","title":"Stop"},{"location":"features/windows-service/#uninstall-the-service","text":"To uninstall the SWS service just use the uninstall command. Note that the service should be first stopped before uninstalling it. static-web-server . exe uninstall # Windows Service (static-web-server) is uninstalled! After uninstalling the service you can verify if removed. sc . exe qc \"static-web-server\" # [SC] OpenService FAILED 1060: # # The specified service does not exist as an installed service.","title":"Uninstall the service"},{"location":"features/worker-threads/","text":"Worker Threads Customization \u00b6 SWS allows customizing the number of worker threads powered by the Tokio runtime. This feature can be controlled by the numeric -n, --threads-multiplier option or the equivalent SERVER_THREADS_MULTIPLIER env. Worker threads multiplier \u00b6 The value of -n, --threads-multiplier works as multiplier digits to determine the number of worker threads used by the server. Multiplying this input number by the number of system CPUs. The formula used is the following: worker threads = number of CPUs * n Where n is the input value of -n, --threads-multiplier . For example: If there are 4 available CPUs and the --threads-multiplier is 8 then the total of worker threads to use will be 32 . Tip When the --threads-multiplier input value is 0 or 1 then one thread per core is used (default value). Warn The number of worker threads result should be a number between 1 and 32,768 though it is advised to keep this value on the smaller side. See Tokio worker_threads API for more details. Below is an example of how to adjust the number of worker threads. static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ # NOTE: \"8\" gets multiplied by the number of the available cores. --threads-multiplier 8","title":"Worker Threads Customization"},{"location":"features/worker-threads/#worker-threads-customization","text":"SWS allows customizing the number of worker threads powered by the Tokio runtime. This feature can be controlled by the numeric -n, --threads-multiplier option or the equivalent SERVER_THREADS_MULTIPLIER env.","title":"Worker Threads Customization"},{"location":"features/worker-threads/#worker-threads-multiplier","text":"The value of -n, --threads-multiplier works as multiplier digits to determine the number of worker threads used by the server. Multiplying this input number by the number of system CPUs. The formula used is the following: worker threads = number of CPUs * n Where n is the input value of -n, --threads-multiplier . For example: If there are 4 available CPUs and the --threads-multiplier is 8 then the total of worker threads to use will be 32 . Tip When the --threads-multiplier input value is 0 or 1 then one thread per core is used (default value). Warn The number of worker threads result should be a number between 1 and 32,768 though it is advised to keep this value on the smaller side. See Tokio worker_threads API for more details. Below is an example of how to adjust the number of worker threads. static-web-server \\ --port 8787 \\ --root ./my-public-dir \\ # NOTE: \"8\" gets multiplied by the number of the available cores. --threads-multiplier 8","title":"Worker threads multiplier"}]}